
keybad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000171a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002a8  00800060  0000171a  000017ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b6  00800308  00800308  00001a56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038bf  00000000  00000000  00001d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f2a  00000000  00000000  0000561b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ae0  00000000  00000000  00006545  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  00008028  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e6  00000000  00000000  0000857c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001500  00000000  00000000  00008e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000a362  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__vector_11>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	ff 08       	sbc	r15, r15
      56:	3a 09       	sbc	r19, r10
      58:	3a 09       	sbc	r19, r10
      5a:	3a 09       	sbc	r19, r10
      5c:	3a 09       	sbc	r19, r10
      5e:	3a 09       	sbc	r19, r10
      60:	3a 09       	sbc	r19, r10
      62:	f5 08       	sbc	r15, r5
      64:	3a 09       	sbc	r19, r10
      66:	3a 09       	sbc	r19, r10
      68:	3a 09       	sbc	r19, r10
      6a:	3a 09       	sbc	r19, r10
      6c:	3a 09       	sbc	r19, r10
      6e:	09 09       	sbc	r16, r9
      70:	3a 09       	sbc	r19, r10
      72:	3a 09       	sbc	r19, r10
      74:	3a 09       	sbc	r19, r10
      76:	3a 09       	sbc	r19, r10
      78:	3a 09       	sbc	r19, r10
      7a:	3a 09       	sbc	r19, r10
      7c:	13 09       	sbc	r17, r3
      7e:	1d 09       	sbc	r17, r13
      80:	27 09       	sbc	r18, r7
      82:	3a 09       	sbc	r19, r10
      84:	3a 09       	sbc	r19, r10
      86:	3a 09       	sbc	r19, r10
      88:	3a 09       	sbc	r19, r10
      8a:	3a 09       	sbc	r19, r10
      8c:	3a 09       	sbc	r19, r10
      8e:	3a 09       	sbc	r19, r10
      90:	3a 09       	sbc	r19, r10
      92:	3a 09       	sbc	r19, r10
      94:	3a 09       	sbc	r19, r10
      96:	31 09       	sbc	r19, r1

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf e5       	ldi	r28, 0x5F	; 95
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	a0 e6       	ldi	r26, 0x60	; 96
      a8:	b0 e0       	ldi	r27, 0x00	; 0
      aa:	ea e1       	ldi	r30, 0x1A	; 26
      ac:	f7 e1       	ldi	r31, 0x17	; 23
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a8 30       	cpi	r26, 0x08	; 8
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
      ba:	23 e0       	ldi	r18, 0x03	; 3
      bc:	a8 e0       	ldi	r26, 0x08	; 8
      be:	b3 e0       	ldi	r27, 0x03	; 3
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ae 3b       	cpi	r26, 0xBE	; 190
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 41 05 	call	0xa82	; 0xa82 <main>
      ce:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <ADC_init>:


void ADC_init(void)
{
    // select Vref =AVCC
    SET_BIT(ADMUX,6);
      d6:	87 b1       	in	r24, 0x07	; 7
      d8:	80 64       	ori	r24, 0x40	; 64
      da:	87 b9       	out	0x07, r24	; 7
	CLEAR_BIT(ADMUX,7);
      dc:	87 b1       	in	r24, 0x07	; 7
      de:	8f 77       	andi	r24, 0x7F	; 127
      e0:	87 b9       	out	0x07, r24	; 7

	// clear ADLAR select right 
	CLEAR_BIT(ADMUX,5);
      e2:	87 b1       	in	r24, 0x07	; 7
      e4:	8f 7d       	andi	r24, 0xDF	; 223
      e6:	87 b9       	out	0x07, r24	; 7

	// single conversion mode
	CLEAR_BIT(ADCSRA,5);
      e8:	86 b1       	in	r24, 0x06	; 6
      ea:	8f 7d       	andi	r24, 0xDF	; 223
      ec:	86 b9       	out	0x06, r24	; 6

	// prescalar
	SET_BIT(ADCSRA,0);
      ee:	86 b1       	in	r24, 0x06	; 6
      f0:	81 60       	ori	r24, 0x01	; 1
      f2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);
      f4:	86 b1       	in	r24, 0x06	; 6
      f6:	82 60       	ori	r24, 0x02	; 2
      f8:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);
      fa:	86 b1       	in	r24, 0x06	; 6
      fc:	84 60       	ori	r24, 0x04	; 4
      fe:	86 b9       	out	0x06, r24	; 6

	// enable ADC 
	SET_BIT(ADCSRA,7);
     100:	86 b1       	in	r24, 0x06	; 6
     102:	80 68       	ori	r24, 0x80	; 128
     104:	86 b9       	out	0x06, r24	; 6
     106:	08 95       	ret

00000108 <ADC_getDigitalValue>:
}


void ADC_getDigitalValue(u8 channelNum,u16* returendValue)
{
    if((channelNum<32) && returendValue != NULL)
     108:	80 32       	cpi	r24, 0x20	; 32
     10a:	b0 f4       	brcc	.+44     	; 0x138 <ADC_getDigitalValue+0x30>
     10c:	61 15       	cp	r22, r1
     10e:	71 05       	cpc	r23, r1
     110:	99 f0       	breq	.+38     	; 0x138 <ADC_getDigitalValue+0x30>
	{
	    ADMUX &=0b11100000;
     112:	97 b1       	in	r25, 0x07	; 7
     114:	90 7e       	andi	r25, 0xE0	; 224
     116:	97 b9       	out	0x07, r25	; 7

        ADMUX |=channelNum;
     118:	97 b1       	in	r25, 0x07	; 7
     11a:	89 2b       	or	r24, r25
     11c:	87 b9       	out	0x07, r24	; 7

		// start conversion
		SET_BIT(ADCSRA,6);
     11e:	86 b1       	in	r24, 0x06	; 6
     120:	80 64       	ori	r24, 0x40	; 64
     122:	86 b9       	out	0x06, r24	; 6

		while(GET_BIT(ADCSRA,4) == 0);
     124:	34 9b       	sbis	0x06, 4	; 6
     126:	fe cf       	rjmp	.-4      	; 0x124 <ADC_getDigitalValue+0x1c>

		// clear flag
		SET_BIT(ADCSRA,4);
     128:	86 b1       	in	r24, 0x06	; 6
     12a:	80 61       	ori	r24, 0x10	; 16
     12c:	86 b9       	out	0x06, r24	; 6

		*returendValue=ADC_U16;
     12e:	84 b1       	in	r24, 0x04	; 4
     130:	95 b1       	in	r25, 0x05	; 5
     132:	fb 01       	movw	r30, r22
     134:	91 83       	std	Z+1, r25	; 0x01
     136:	80 83       	st	Z, r24
     138:	08 95       	ret

0000013a <DIO_SetPinDirection>:



 void DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PinDir)
 {
    if(PortId>=0 && PortId<=3)
     13a:	84 30       	cpi	r24, 0x04	; 4
     13c:	08 f0       	brcs	.+2      	; 0x140 <DIO_SetPinDirection+0x6>
     13e:	72 c0       	rjmp	.+228    	; 0x224 <DIO_SetPinDirection+0xea>
	{
	   if(PinId>=0 && PinId<=7 && PinDir==DIO_PIN_OUT || PinDir==DIO_PIN_IN)
     140:	68 30       	cpi	r22, 0x08	; 8
     142:	10 f4       	brcc	.+4      	; 0x148 <DIO_SetPinDirection+0xe>
     144:	41 30       	cpi	r20, 0x01	; 1
     146:	11 f0       	breq	.+4      	; 0x14c <DIO_SetPinDirection+0x12>
     148:	41 11       	cpse	r20, r1
     14a:	6c c0       	rjmp	.+216    	; 0x224 <DIO_SetPinDirection+0xea>
	   {
	       switch(PortId)
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	01 f1       	breq	.+64     	; 0x190 <DIO_SetPinDirection+0x56>
     150:	30 f0       	brcs	.+12     	; 0x15e <DIO_SetPinDirection+0x24>
     152:	82 30       	cpi	r24, 0x02	; 2
     154:	b1 f1       	breq	.+108    	; 0x1c2 <DIO_SetPinDirection+0x88>
     156:	83 30       	cpi	r24, 0x03	; 3
     158:	09 f4       	brne	.+2      	; 0x15c <DIO_SetPinDirection+0x22>
     15a:	4c c0       	rjmp	.+152    	; 0x1f4 <DIO_SetPinDirection+0xba>
     15c:	08 95       	ret
		   {
		      case DIO_PORTA:
			      if( PinDir==DIO_PIN_OUT )
     15e:	41 30       	cpi	r20, 0x01	; 1
     160:	59 f4       	brne	.+22     	; 0x178 <DIO_SetPinDirection+0x3e>
				  {
				     SET_BIT(DDRA,PinId);
     162:	2a b3       	in	r18, 0x1a	; 26
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_SetPinDirection+0x34>
     16a:	88 0f       	add	r24, r24
     16c:	99 1f       	adc	r25, r25
     16e:	6a 95       	dec	r22
     170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_SetPinDirection+0x30>
     172:	82 2b       	or	r24, r18
     174:	8a bb       	out	0x1a, r24	; 26
					  break;
     176:	08 95       	ret
				  }
				  else
				  {
				     CLEAR_BIT(DDRA,PinId);
     178:	2a b3       	in	r18, 0x1a	; 26
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_SetPinDirection+0x4a>
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	6a 95       	dec	r22
     186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_SetPinDirection+0x46>
     188:	80 95       	com	r24
     18a:	82 23       	and	r24, r18
     18c:	8a bb       	out	0x1a, r24	; 26
					  break;
     18e:	08 95       	ret
				  }

			  case DIO_PORTB:
			     if( PinDir==DIO_PIN_OUT )
     190:	41 30       	cpi	r20, 0x01	; 1
     192:	59 f4       	brne	.+22     	; 0x1aa <DIO_SetPinDirection+0x70>
			     {
				    SET_BIT(DDRB,PinId);
     194:	27 b3       	in	r18, 0x17	; 23
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinDirection+0x66>
     19c:	88 0f       	add	r24, r24
     19e:	99 1f       	adc	r25, r25
     1a0:	6a 95       	dec	r22
     1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinDirection+0x62>
     1a4:	82 2b       	or	r24, r18
     1a6:	87 bb       	out	0x17, r24	; 23
					 break;
     1a8:	08 95       	ret
			     }
			     else
			     {
				    CLEAR_BIT(DDRB,PinId);
     1aa:	27 b3       	in	r18, 0x17	; 23
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinDirection+0x7c>
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	6a 95       	dec	r22
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinDirection+0x78>
     1ba:	80 95       	com	r24
     1bc:	82 23       	and	r24, r18
     1be:	87 bb       	out	0x17, r24	; 23
					 break;
     1c0:	08 95       	ret
			     }

			  case DIO_PORTC:
			     if( PinDir==DIO_PIN_OUT )
     1c2:	41 30       	cpi	r20, 0x01	; 1
     1c4:	59 f4       	brne	.+22     	; 0x1dc <DIO_SetPinDirection+0xa2>
			     {
				    SET_BIT(DDRC,PinId);
     1c6:	24 b3       	in	r18, 0x14	; 20
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_SetPinDirection+0x98>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	6a 95       	dec	r22
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_SetPinDirection+0x94>
     1d6:	82 2b       	or	r24, r18
     1d8:	84 bb       	out	0x14, r24	; 20
					 break;
     1da:	08 95       	ret
			     }
			     else
			     {
				    CLEAR_BIT(DDRC,PinId);
     1dc:	24 b3       	in	r18, 0x14	; 20
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_SetPinDirection+0xae>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	6a 95       	dec	r22
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_SetPinDirection+0xaa>
     1ec:	80 95       	com	r24
     1ee:	82 23       	and	r24, r18
     1f0:	84 bb       	out	0x14, r24	; 20
					 break;
     1f2:	08 95       	ret
			     }

			  case DIO_PORTD:
			     if( PinDir==DIO_PIN_OUT )
     1f4:	41 30       	cpi	r20, 0x01	; 1
     1f6:	59 f4       	brne	.+22     	; 0x20e <DIO_SetPinDirection+0xd4>
			     {
				    SET_BIT(DDRD,PinId);
     1f8:	21 b3       	in	r18, 0x11	; 17
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_SetPinDirection+0xca>
     200:	88 0f       	add	r24, r24
     202:	99 1f       	adc	r25, r25
     204:	6a 95       	dec	r22
     206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_SetPinDirection+0xc6>
     208:	82 2b       	or	r24, r18
     20a:	81 bb       	out	0x11, r24	; 17
					 break;
     20c:	08 95       	ret
			     }
			     else
			    {
				    CLEAR_BIT(DDRD,PinId);
     20e:	21 b3       	in	r18, 0x11	; 17
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPinDirection+0xe0>
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPinDirection+0xdc>
     21e:	80 95       	com	r24
     220:	82 23       	and	r24, r18
     222:	81 bb       	out	0x11, r24	; 17
     224:	08 95       	ret

00000226 <DIO_SetPinValue>:
	   }
	}
 }
 void DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
 {
     if(PortId>=0 && PortId<=3)
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	08 f0       	brcs	.+2      	; 0x22c <DIO_SetPinValue+0x6>
     22a:	72 c0       	rjmp	.+228    	; 0x310 <DIO_SetPinValue+0xea>
     {
	     if(PinId>=0 && PinId<=7 && PinValue==DIO_PIN_HIGH || PinValue==DIO_PIN_LOW)
     22c:	68 30       	cpi	r22, 0x08	; 8
     22e:	10 f4       	brcc	.+4      	; 0x234 <DIO_SetPinValue+0xe>
     230:	41 30       	cpi	r20, 0x01	; 1
     232:	11 f0       	breq	.+4      	; 0x238 <DIO_SetPinValue+0x12>
     234:	41 11       	cpse	r20, r1
     236:	6c c0       	rjmp	.+216    	; 0x310 <DIO_SetPinValue+0xea>
	     {
		     switch(PortId)
     238:	81 30       	cpi	r24, 0x01	; 1
     23a:	01 f1       	breq	.+64     	; 0x27c <DIO_SetPinValue+0x56>
     23c:	30 f0       	brcs	.+12     	; 0x24a <DIO_SetPinValue+0x24>
     23e:	82 30       	cpi	r24, 0x02	; 2
     240:	b1 f1       	breq	.+108    	; 0x2ae <DIO_SetPinValue+0x88>
     242:	83 30       	cpi	r24, 0x03	; 3
     244:	09 f4       	brne	.+2      	; 0x248 <DIO_SetPinValue+0x22>
     246:	4c c0       	rjmp	.+152    	; 0x2e0 <DIO_SetPinValue+0xba>
     248:	08 95       	ret
		     {
			     case DIO_PORTA:
			     if( PinValue==DIO_PIN_HIGH )
     24a:	41 30       	cpi	r20, 0x01	; 1
     24c:	59 f4       	brne	.+22     	; 0x264 <DIO_SetPinValue+0x3e>
			     {
				     SET_BIT(PORTA,PinId);
     24e:	2b b3       	in	r18, 0x1b	; 27
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_SetPinValue+0x34>
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	6a 95       	dec	r22
     25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_SetPinValue+0x30>
     25e:	82 2b       	or	r24, r18
     260:	8b bb       	out	0x1b, r24	; 27
					 break;
     262:	08 95       	ret
			     }
			     else
			     {
				     CLEAR_BIT(PORTA,PinId);
     264:	2b b3       	in	r18, 0x1b	; 27
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_SetPinValue+0x4a>
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	6a 95       	dec	r22
     272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_SetPinValue+0x46>
     274:	80 95       	com	r24
     276:	82 23       	and	r24, r18
     278:	8b bb       	out	0x1b, r24	; 27
					 break;
     27a:	08 95       	ret
			     }

			     case DIO_PORTB:
			     if( PinValue==DIO_PIN_HIGH )
     27c:	41 30       	cpi	r20, 0x01	; 1
     27e:	59 f4       	brne	.+22     	; 0x296 <DIO_SetPinValue+0x70>
			     {
				     SET_BIT(PORTB,PinId);
     280:	28 b3       	in	r18, 0x18	; 24
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SetPinValue+0x66>
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	6a 95       	dec	r22
     28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SetPinValue+0x62>
     290:	82 2b       	or	r24, r18
     292:	88 bb       	out	0x18, r24	; 24
					 break;
     294:	08 95       	ret
			     }
			     else
			     {
				     CLEAR_BIT(PORTB,PinId);
     296:	28 b3       	in	r18, 0x18	; 24
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_SetPinValue+0x7c>
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	6a 95       	dec	r22
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_SetPinValue+0x78>
     2a6:	80 95       	com	r24
     2a8:	82 23       	and	r24, r18
     2aa:	88 bb       	out	0x18, r24	; 24
					 break;
     2ac:	08 95       	ret
			     }

			     case DIO_PORTC:
			     if( PinValue==DIO_PIN_HIGH )
     2ae:	41 30       	cpi	r20, 0x01	; 1
     2b0:	59 f4       	brne	.+22     	; 0x2c8 <DIO_SetPinValue+0xa2>
			     {
				     SET_BIT(PORTC,PinId);
     2b2:	25 b3       	in	r18, 0x15	; 21
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_SetPinValue+0x98>
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	6a 95       	dec	r22
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_SetPinValue+0x94>
     2c2:	82 2b       	or	r24, r18
     2c4:	85 bb       	out	0x15, r24	; 21
					 break;
     2c6:	08 95       	ret
			     }
			     else
			     {
				     CLEAR_BIT(PORTC,PinId);
     2c8:	25 b3       	in	r18, 0x15	; 21
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_SetPinValue+0xae>
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	6a 95       	dec	r22
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_SetPinValue+0xaa>
     2d8:	80 95       	com	r24
     2da:	82 23       	and	r24, r18
     2dc:	85 bb       	out	0x15, r24	; 21
					  break;
     2de:	08 95       	ret
			     }

			     case DIO_PORTD:
			     if( PinValue==DIO_PIN_HIGH )
     2e0:	41 30       	cpi	r20, 0x01	; 1
     2e2:	59 f4       	brne	.+22     	; 0x2fa <DIO_SetPinValue+0xd4>
			     {
				     SET_BIT(PORTD,PinId);
     2e4:	22 b3       	in	r18, 0x12	; 18
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_SetPinValue+0xca>
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	6a 95       	dec	r22
     2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_SetPinValue+0xc6>
     2f4:	82 2b       	or	r24, r18
     2f6:	82 bb       	out	0x12, r24	; 18
					 break;
     2f8:	08 95       	ret
			     }
			     else
			     {
				     CLEAR_BIT(PORTD,PinId);
     2fa:	22 b3       	in	r18, 0x12	; 18
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_SetPinValue+0xe0>
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	6a 95       	dec	r22
     308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_SetPinValue+0xdc>
     30a:	80 95       	com	r24
     30c:	82 23       	and	r24, r18
     30e:	82 bb       	out	0x12, r24	; 18
     310:	08 95       	ret

00000312 <DIO_SetRegValue>:
     }

 }
 void DIO_SetRegValue(u8 PortId,u8 PortValue)
 {
    if(PortId>=0 && PortId<=3)
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	78 f4       	brcc	.+30     	; 0x334 <DIO_SetRegValue+0x22>
	{
	    switch(PortId)
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	41 f0       	breq	.+16     	; 0x32a <DIO_SetRegValue+0x18>
     31a:	28 f0       	brcs	.+10     	; 0x326 <DIO_SetRegValue+0x14>
     31c:	82 30       	cpi	r24, 0x02	; 2
     31e:	39 f0       	breq	.+14     	; 0x32e <DIO_SetRegValue+0x1c>
     320:	83 30       	cpi	r24, 0x03	; 3
     322:	39 f0       	breq	.+14     	; 0x332 <DIO_SetRegValue+0x20>
     324:	08 95       	ret
		{
		   case DIO_PORTA:
		        PORTA=PortValue;
     326:	6b bb       	out	0x1b, r22	; 27
				break;
     328:	08 95       	ret
		   case DIO_PORTB:
		        PORTB=PortValue;
     32a:	68 bb       	out	0x18, r22	; 24
				break;
     32c:	08 95       	ret
		   case DIO_PORTC:
		        PORTC=PortValue;
     32e:	65 bb       	out	0x15, r22	; 21
				break;
     330:	08 95       	ret
		   case DIO_PORTD:
		        PORTD=PortValue;
     332:	62 bb       	out	0x12, r22	; 18
     334:	08 95       	ret

00000336 <DIO_SetRegDirection>:
	}

 }
 void DIO_SetRegDirection(u8 PortId,u8 PortDir)
 {
       if(PortId>=0 && PortId<=3)
     336:	84 30       	cpi	r24, 0x04	; 4
     338:	78 f4       	brcc	.+30     	; 0x358 <DIO_SetRegDirection+0x22>
       {
	       switch(PortId)
     33a:	81 30       	cpi	r24, 0x01	; 1
     33c:	41 f0       	breq	.+16     	; 0x34e <DIO_SetRegDirection+0x18>
     33e:	28 f0       	brcs	.+10     	; 0x34a <DIO_SetRegDirection+0x14>
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	39 f0       	breq	.+14     	; 0x352 <DIO_SetRegDirection+0x1c>
     344:	83 30       	cpi	r24, 0x03	; 3
     346:	39 f0       	breq	.+14     	; 0x356 <DIO_SetRegDirection+0x20>
     348:	08 95       	ret
	       {
		       case DIO_PORTA:
		       DDRA=PortDir;
     34a:	6a bb       	out	0x1a, r22	; 26
		       break;
     34c:	08 95       	ret
		       case DIO_PORTB:
		       DDRB=PortDir;
     34e:	67 bb       	out	0x17, r22	; 23
		       break;
     350:	08 95       	ret
		       case DIO_PORTC:
		       DDRC=PortDir;
     352:	64 bb       	out	0x14, r22	; 20
		       break;
     354:	08 95       	ret
		       case DIO_PORTD:
		       DDRD=PortDir;
     356:	61 bb       	out	0x11, r22	; 17
     358:	08 95       	ret

0000035a <DIO_GetPinValue>:
 }
 u8 DIO_GetPinValue(u8 PortId,u8 PinId)
 {
      u8 PinVal=0;

     if(PortId>=0 && PortId<=3)
     35a:	84 30       	cpi	r24, 0x04	; 4
     35c:	60 f5       	brcc	.+88     	; 0x3b6 <DIO_GetPinValue+0x5c>
	 {
	     
	    
	     switch(PortId)
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	79 f0       	breq	.+30     	; 0x380 <DIO_GetPinValue+0x26>
     362:	28 f0       	brcs	.+10     	; 0x36e <DIO_GetPinValue+0x14>
     364:	82 30       	cpi	r24, 0x02	; 2
     366:	a9 f0       	breq	.+42     	; 0x392 <DIO_GetPinValue+0x38>
     368:	83 30       	cpi	r24, 0x03	; 3
     36a:	e1 f0       	breq	.+56     	; 0x3a4 <DIO_GetPinValue+0x4a>
     36c:	26 c0       	rjmp	.+76     	; 0x3ba <DIO_GetPinValue+0x60>
		 {

		     case DIO_PORTA:
			 PinVal=GET_BIT(PINA,PinId);
     36e:	89 b3       	in	r24, 0x19	; 25
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_GetPinValue+0x1e>
     374:	95 95       	asr	r25
     376:	87 95       	ror	r24
     378:	6a 95       	dec	r22
     37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_GetPinValue+0x1a>
     37c:	81 70       	andi	r24, 0x01	; 1
			 break;
     37e:	08 95       	ret
			 case DIO_PORTB:
			 PinVal = GET_BIT(PINB,PinId);
     380:	86 b3       	in	r24, 0x16	; 22
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_GetPinValue+0x30>
     386:	95 95       	asr	r25
     388:	87 95       	ror	r24
     38a:	6a 95       	dec	r22
     38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_GetPinValue+0x2c>
     38e:	81 70       	andi	r24, 0x01	; 1
			 break;
     390:	08 95       	ret
			 case DIO_PORTC:
			 PinVal = GET_BIT(PINC,PinId);
     392:	83 b3       	in	r24, 0x13	; 19
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_GetPinValue+0x42>
     398:	95 95       	asr	r25
     39a:	87 95       	ror	r24
     39c:	6a 95       	dec	r22
     39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_GetPinValue+0x3e>
     3a0:	81 70       	andi	r24, 0x01	; 1
			 break;
     3a2:	08 95       	ret
			 case DIO_PORTD:
			 PinVal =GET_BIT(PIND,PinId);
     3a4:	80 b3       	in	r24, 0x10	; 16
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_GetPinValue+0x54>
     3aa:	95 95       	asr	r25
     3ac:	87 95       	ror	r24
     3ae:	6a 95       	dec	r22
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_GetPinValue+0x50>
     3b2:	81 70       	andi	r24, 0x01	; 1
			 break;
     3b4:	08 95       	ret
       }

 }
 u8 DIO_GetPinValue(u8 PortId,u8 PinId)
 {
      u8 PinVal=0;
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	08 95       	ret
     3ba:	80 e0       	ldi	r24, 0x00	; 0

		 }	
	 }
	  
	 return PinVal;
 }
     3bc:	08 95       	ret

000003be <DIO_SetPullupRes>:

 void DIO_SetPullupRes(u8 PortId,u8 PinId)
 {
    if(PortId>=0 && PortId<=3)
     3be:	84 30       	cpi	r24, 0x04	; 4
     3c0:	98 f5       	brcc	.+102    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	{
	   switch(PortId)
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	89 f0       	breq	.+34     	; 0x3e8 <DIO_SetPullupRes+0x2a>
     3c6:	28 f0       	brcs	.+10     	; 0x3d2 <DIO_SetPullupRes+0x14>
     3c8:	82 30       	cpi	r24, 0x02	; 2
     3ca:	c9 f0       	breq	.+50     	; 0x3fe <DIO_SetPullupRes+0x40>
     3cc:	83 30       	cpi	r24, 0x03	; 3
     3ce:	11 f1       	breq	.+68     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     3d0:	08 95       	ret
	   {
	      case DIO_PORTA:
		  SET_BIT(PORTA,PinId);
     3d2:	2b b3       	in	r18, 0x1b	; 27
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_SetPullupRes+0x20>
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	6a 95       	dec	r22
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_SetPullupRes+0x1c>
     3e2:	82 2b       	or	r24, r18
     3e4:	8b bb       	out	0x1b, r24	; 27
		  break;
     3e6:	08 95       	ret
		  case DIO_PORTB:
		  SET_BIT(PORTB,PinId);
     3e8:	28 b3       	in	r18, 0x18	; 24
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_SetPullupRes+0x36>
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	6a 95       	dec	r22
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_SetPullupRes+0x32>
     3f8:	82 2b       	or	r24, r18
     3fa:	88 bb       	out	0x18, r24	; 24
		  break;
     3fc:	08 95       	ret
		  case DIO_PORTC:
		  SET_BIT(PORTC,PinId);
     3fe:	25 b3       	in	r18, 0x15	; 21
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	6a 95       	dec	r22
     40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     40e:	82 2b       	or	r24, r18
     410:	85 bb       	out	0x15, r24	; 21
		  break;
     412:	08 95       	ret
		  case DIO_PORTD:
		  SET_BIT(PORTD,PinId);
     414:	22 b3       	in	r18, 0x12	; 18
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	6a 95       	dec	r22
     422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     424:	82 2b       	or	r24, r18
     426:	82 bb       	out	0x12, r24	; 18
     428:	08 95       	ret

0000042a <DIO_GetRegValue>:
 }

 u8 DIO_GetRegValue(u8 PortId)
  {
	  u8 RegValue=0;
	  if(PortId>=0 && PortId<=3)
     42a:	84 30       	cpi	r24, 0x04	; 4
     42c:	80 f4       	brcc	.+32     	; 0x44e <DIO_GetRegValue+0x24>
	  {
		  
		  switch(PortId)
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	41 f0       	breq	.+16     	; 0x442 <DIO_GetRegValue+0x18>
     432:	28 f0       	brcs	.+10     	; 0x43e <DIO_GetRegValue+0x14>
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	39 f0       	breq	.+14     	; 0x446 <DIO_GetRegValue+0x1c>
     438:	83 30       	cpi	r24, 0x03	; 3
     43a:	39 f0       	breq	.+14     	; 0x44a <DIO_GetRegValue+0x20>
     43c:	0a c0       	rjmp	.+20     	; 0x452 <DIO_GetRegValue+0x28>
		  {
			  case DIO_PORTA:
			  RegValue=PINA;
     43e:	89 b3       	in	r24, 0x19	; 25
			  break;
     440:	08 95       	ret
			  case DIO_PORTB:
			  RegValue=PINB;
     442:	86 b3       	in	r24, 0x16	; 22
			  break;
     444:	08 95       	ret
			  case DIO_PORTC:
			  RegValue=PINC;
     446:	83 b3       	in	r24, 0x13	; 19
			  break;
     448:	08 95       	ret
			  case DIO_PORTD:
			  RegValue=PIND;
     44a:	80 b3       	in	r24, 0x10	; 16
			  break;
     44c:	08 95       	ret
	}
 }

 u8 DIO_GetRegValue(u8 PortId)
  {
	  u8 RegValue=0;
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	08 95       	ret
     452:	80 e0       	ldi	r24, 0x00	; 0
		  }
	  }
	  return RegValue;
	  

     454:	08 95       	ret

00000456 <EEPROM_WriteByte>:
 #include <util/delay.h>

 /* FUN IMPEL */

 void EEPROM_WriteByte(u16 ByteAddress,u8 data)
 {
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	d8 2f       	mov	r29, r24
     45e:	c6 2f       	mov	r28, r22
     u8 address =(u8)((0x50) | (u8)(ByteAddress>>8));
     460:	19 2f       	mov	r17, r25
     462:	10 65       	ori	r17, 0x50	; 80
	 I2C_SendStartCondition();
     464:	0e 94 a7 02 	call	0x54e	; 0x54e <I2C_SendStartCondition>
	 I2C_SendSlaveAddWithWrite(address);
     468:	81 2f       	mov	r24, r17
     46a:	0e 94 ca 02 	call	0x594	; 0x594 <I2C_SendSlaveAddWithWrite>
	 I2C_SendMasterDataByte((u8)ByteAddress);
     46e:	8d 2f       	mov	r24, r29
     470:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <I2C_SendMasterDataByte>
	 I2C_SendMasterDataByte(data);
     474:	8c 2f       	mov	r24, r28
     476:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <I2C_SendMasterDataByte>
	 I2C_SendStopCondition();
     47a:	0e 94 c3 02 	call	0x586	; 0x586 <I2C_SendStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47e:	8f e1       	ldi	r24, 0x1F	; 31
     480:	9e e4       	ldi	r25, 0x4E	; 78
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <EEPROM_WriteByte+0x2c>
     486:	00 c0       	rjmp	.+0      	; 0x488 <EEPROM_WriteByte+0x32>
     488:	00 00       	nop
	 _delay_ms(5);
 }
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	08 95       	ret

00000492 <EEPROM_ReadByte>:
 void EEPROM_ReadByte(u16 ByteAddress,u8* data)
 {
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	d8 2f       	mov	r29, r24
     49c:	8b 01       	movw	r16, r22
    u8 address =(u8)((0x50) | (u8)(ByteAddress>>8));
     49e:	c9 2f       	mov	r28, r25
     4a0:	c0 65       	ori	r28, 0x50	; 80
    I2C_SendStartCondition();
     4a2:	0e 94 a7 02 	call	0x54e	; 0x54e <I2C_SendStartCondition>
    I2C_SendSlaveAddWithWrite(address);
     4a6:	8c 2f       	mov	r24, r28
     4a8:	0e 94 ca 02 	call	0x594	; 0x594 <I2C_SendSlaveAddWithWrite>
    I2C_SendMasterDataByte((u8)ByteAddress);
     4ac:	8d 2f       	mov	r24, r29
     4ae:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <I2C_SendMasterDataByte>
	I2C_SendRepStartCondition();
     4b2:	0e 94 b5 02 	call	0x56a	; 0x56a <I2C_SendRepStartCondition>
	I2C_SendSlaveAddWithRead(address);
     4b6:	8c 2f       	mov	r24, r28
     4b8:	0e 94 df 02 	call	0x5be	; 0x5be <I2C_SendSlaveAddWithRead>
	I2C_ReciveMasterDataByte(data);
     4bc:	c8 01       	movw	r24, r16
     4be:	0e 94 ff 02 	call	0x5fe	; 0x5fe <I2C_ReciveMasterDataByte>
	I2C_SendStopCondition();
     4c2:	0e 94 c3 02 	call	0x586	; 0x586 <I2C_SendStopCondition>
     4c6:	8f e1       	ldi	r24, 0x1F	; 31
     4c8:	9e e4       	ldi	r25, 0x4E	; 78
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <EEPROM_ReadByte+0x38>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <EEPROM_ReadByte+0x3e>
     4d0:	00 00       	nop
	_delay_ms(5);
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	08 95       	ret

000004dc <EEPROM_Compare>:
void EEPROM_Compare(u8*arr,u8*arr_1)
{
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	7c 01       	movw	r14, r24
     4e8:	8b 01       	movw	r16, r22
  for(u8 i=0;i<4;i++)
     4ea:	c0 e0       	ldi	r28, 0x00	; 0
     4ec:	08 c0       	rjmp	.+16     	; 0x4fe <EEPROM_Compare+0x22>
  {
      EEPROM_ReadByte(i,&arr[i]);
     4ee:	8c 2f       	mov	r24, r28
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	b7 01       	movw	r22, r14
     4f4:	68 0f       	add	r22, r24
     4f6:	79 1f       	adc	r23, r25
     4f8:	0e 94 49 02 	call	0x492	; 0x492 <EEPROM_ReadByte>
	I2C_SendStopCondition();
	_delay_ms(5);
}
void EEPROM_Compare(u8*arr,u8*arr_1)
{
  for(u8 i=0;i<4;i++)
     4fc:	cf 5f       	subi	r28, 0xFF	; 255
     4fe:	c4 30       	cpi	r28, 0x04	; 4
     500:	b0 f3       	brcs	.-20     	; 0x4ee <EEPROM_Compare+0x12>
     502:	c0 e0       	ldi	r28, 0x00	; 0
     504:	09 c0       	rjmp	.+18     	; 0x518 <EEPROM_Compare+0x3c>
  {
      EEPROM_ReadByte(i,&arr[i]);
  }
  for(u8 j=0; j<4;j++)
  {
      EEPROM_ReadByte((j+4),&arr_1[j]);
     506:	8c 2f       	mov	r24, r28
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	b8 01       	movw	r22, r16
     50c:	68 0f       	add	r22, r24
     50e:	79 1f       	adc	r23, r25
     510:	04 96       	adiw	r24, 0x04	; 4
     512:	0e 94 49 02 	call	0x492	; 0x492 <EEPROM_ReadByte>
{
  for(u8 i=0;i<4;i++)
  {
      EEPROM_ReadByte(i,&arr[i]);
  }
  for(u8 j=0; j<4;j++)
     516:	cf 5f       	subi	r28, 0xFF	; 255
     518:	c4 30       	cpi	r28, 0x04	; 4
     51a:	a8 f3       	brcs	.-22     	; 0x506 <EEPROM_Compare+0x2a>
  {
      EEPROM_ReadByte((j+4),&arr_1[j]);
  }
     51c:	cf 91       	pop	r28
     51e:	1f 91       	pop	r17
     520:	0f 91       	pop	r16
     522:	ff 90       	pop	r15
     524:	ef 90       	pop	r14
     526:	08 95       	ret

00000528 <GI_enable>:

#include "GI_interface.h"

void GI_enable(void)
{
   SET_BIT(SREG,7);
     528:	8f b7       	in	r24, 0x3f	; 63
     52a:	80 68       	ori	r24, 0x80	; 128
     52c:	8f bf       	out	0x3f, r24	; 63
     52e:	08 95       	ret

00000530 <I2C_INITMASTER>:

 void I2C_INITMASTER(void)
 {  
   
    // Set Prescaller = 1 >> Set Freq. = 400KHZ
    CLEAR_BIT(TWSR,0);
     530:	81 b1       	in	r24, 0x01	; 1
     532:	8e 7f       	andi	r24, 0xFE	; 254
     534:	81 b9       	out	0x01, r24	; 1
	CLEAR_BIT(TWSR,1);
     536:	81 b1       	in	r24, 0x01	; 1
     538:	8d 7f       	andi	r24, 0xFD	; 253
     53a:	81 b9       	out	0x01, r24	; 1
    TWBR=12;
     53c:	8c e0       	ldi	r24, 0x0C	; 12
     53e:	80 b9       	out	0x00, r24	; 0
	// Set ACK bit
	SET_BIT(TWCR,6);
     540:	86 b7       	in	r24, 0x36	; 54
     542:	80 64       	ori	r24, 0x40	; 64
     544:	86 bf       	out	0x36, r24	; 54
	// Enable I2C
	SET_BIT(TWCR,2);
     546:	86 b7       	in	r24, 0x36	; 54
     548:	84 60       	ori	r24, 0x04	; 4
     54a:	86 bf       	out	0x36, r24	; 54
     54c:	08 95       	ret

0000054e <I2C_SendStartCondition>:
 }
 void I2C_SendStartCondition(void)
 {
    // Set Start Condition Bit
	  SET_BIT(TWCR,5);
     54e:	86 b7       	in	r24, 0x36	; 54
     550:	80 62       	ori	r24, 0x20	; 32
     552:	86 bf       	out	0x36, r24	; 54

	 //Clear Flag To Start 
	 SET_BIT(TWCR,7);
     554:	86 b7       	in	r24, 0x36	; 54
     556:	80 68       	ori	r24, 0x80	; 128
     558:	86 bf       	out	0x36, r24	; 54

	 //Wait for Set flag
	 while(GET_BIT(TWCR,7)==0);
     55a:	06 b6       	in	r0, 0x36	; 54
     55c:	07 fe       	sbrs	r0, 7
     55e:	fd cf       	rjmp	.-6      	; 0x55a <I2C_SendStartCondition+0xc>
     
	 //Check ACK =SC ACK
	 while((TWSR & 0xF8) != 0x08);
     560:	81 b1       	in	r24, 0x01	; 1
     562:	88 7f       	andi	r24, 0xF8	; 248
     564:	88 30       	cpi	r24, 0x08	; 8
     566:	e1 f7       	brne	.-8      	; 0x560 <I2C_SendStartCondition+0x12>
 }
     568:	08 95       	ret

0000056a <I2C_SendRepStartCondition>:
 void I2C_SendRepStartCondition(void)
 {
     // Set Start Condition Bit
     SET_BIT(TWCR,5);
     56a:	86 b7       	in	r24, 0x36	; 54
     56c:	80 62       	ori	r24, 0x20	; 32
     56e:	86 bf       	out	0x36, r24	; 54

     //Clear Flag To Start
     SET_BIT(TWCR,7);
     570:	86 b7       	in	r24, 0x36	; 54
     572:	80 68       	ori	r24, 0x80	; 128
     574:	86 bf       	out	0x36, r24	; 54

     //Wait for Set flag
     while(GET_BIT(TWCR,7)==0);
     576:	06 b6       	in	r0, 0x36	; 54
     578:	07 fe       	sbrs	r0, 7
     57a:	fd cf       	rjmp	.-6      	; 0x576 <I2C_SendRepStartCondition+0xc>
     
	 //Check ACK = SC ACK
	 while((TWSR & 0xF8) != 0x10);
     57c:	81 b1       	in	r24, 0x01	; 1
     57e:	88 7f       	andi	r24, 0xF8	; 248
     580:	80 31       	cpi	r24, 0x10	; 16
     582:	e1 f7       	brne	.-8      	; 0x57c <I2C_SendRepStartCondition+0x12>
 }
     584:	08 95       	ret

00000586 <I2C_SendStopCondition>:
 void I2C_SendStopCondition(void)
 {
    // Send Stop Condition
	SET_BIT(TWCR,4);
     586:	86 b7       	in	r24, 0x36	; 54
     588:	80 61       	ori	r24, 0x10	; 16
     58a:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start 
	SET_BIT(TWCR,7);
     58c:	86 b7       	in	r24, 0x36	; 54
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	86 bf       	out	0x36, r24	; 54
     592:	08 95       	ret

00000594 <I2C_SendSlaveAddWithWrite>:
 }
 void I2C_SendSlaveAddWithWrite(u8 SlaveAdd)
 {
     if(SlaveAdd<128)
     594:	88 23       	and	r24, r24
     596:	94 f0       	brlt	.+36     	; 0x5bc <I2C_SendSlaveAddWithWrite+0x28>
	 { 
	     TWDR=SlaveAdd<<1;
     598:	88 0f       	add	r24, r24
     59a:	83 b9       	out	0x03, r24	; 3
		 CLEAR_BIT(TWDR,0);
     59c:	83 b1       	in	r24, 0x03	; 3
     59e:	8e 7f       	andi	r24, 0xFE	; 254
     5a0:	83 b9       	out	0x03, r24	; 3

		 //Clear start Cond
		 CLEAR_BIT(TWCR,5);
     5a2:	86 b7       	in	r24, 0x36	; 54
     5a4:	8f 7d       	andi	r24, 0xDF	; 223
     5a6:	86 bf       	out	0x36, r24	; 54

		 //Clear Flag to start
		 SET_BIT(TWCR,7);
     5a8:	86 b7       	in	r24, 0x36	; 54
     5aa:	80 68       	ori	r24, 0x80	; 128
     5ac:	86 bf       	out	0x36, r24	; 54

		 //Wait for Set flag
		 while(GET_BIT(TWCR,7)==0);
     5ae:	06 b6       	in	r0, 0x36	; 54
     5b0:	07 fe       	sbrs	r0, 7
     5b2:	fd cf       	rjmp	.-6      	; 0x5ae <I2C_SendSlaveAddWithWrite+0x1a>

		 //Check ACK = SC ACK
		 while((TWSR & 0xF8) != 0x18);
     5b4:	81 b1       	in	r24, 0x01	; 1
     5b6:	88 7f       	andi	r24, 0xF8	; 248
     5b8:	88 31       	cpi	r24, 0x18	; 24
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <I2C_SendSlaveAddWithWrite+0x20>
     5bc:	08 95       	ret

000005be <I2C_SendSlaveAddWithRead>:

	 
 }
 void I2C_SendSlaveAddWithRead(u8 SlaveAdd)
 {
     if(SlaveAdd<128)
     5be:	88 23       	and	r24, r24
     5c0:	94 f0       	brlt	.+36     	; 0x5e6 <I2C_SendSlaveAddWithRead+0x28>
     {
	     TWDR=SlaveAdd<<1;
     5c2:	88 0f       	add	r24, r24
     5c4:	83 b9       	out	0x03, r24	; 3
	     SET_BIT(TWDR,0);
     5c6:	83 b1       	in	r24, 0x03	; 3
     5c8:	81 60       	ori	r24, 0x01	; 1
     5ca:	83 b9       	out	0x03, r24	; 3

	     //Clear start Cond
	     CLEAR_BIT(TWCR,5);
     5cc:	86 b7       	in	r24, 0x36	; 54
     5ce:	8f 7d       	andi	r24, 0xDF	; 223
     5d0:	86 bf       	out	0x36, r24	; 54

	     //Clear Flag to start
	     SET_BIT(TWCR,7);
     5d2:	86 b7       	in	r24, 0x36	; 54
     5d4:	80 68       	ori	r24, 0x80	; 128
     5d6:	86 bf       	out	0x36, r24	; 54

	     //Wait for Set flag
	     while(GET_BIT(TWCR,7)==0);
     5d8:	06 b6       	in	r0, 0x36	; 54
     5da:	07 fe       	sbrs	r0, 7
     5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <I2C_SendSlaveAddWithRead+0x1a>

	     //Check ACK = SC ACK
	     while((TWSR & 0xF8) != 0x40);
     5de:	81 b1       	in	r24, 0x01	; 1
     5e0:	88 7f       	andi	r24, 0xF8	; 248
     5e2:	80 34       	cpi	r24, 0x40	; 64
     5e4:	e1 f7       	brne	.-8      	; 0x5de <I2C_SendSlaveAddWithRead+0x20>
     5e6:	08 95       	ret

000005e8 <I2C_SendMasterDataByte>:
  }  
 }
 void I2C_SendMasterDataByte(u8 Senddata)
 {
    TWDR=Senddata;
     5e8:	83 b9       	out	0x03, r24	; 3

	//Clear Flag to start
	
	TWCR=(1<<7) | (1<<2);
     5ea:	84 e8       	ldi	r24, 0x84	; 132
     5ec:	86 bf       	out	0x36, r24	; 54
	//Wait for Set flag
	while(GET_BIT(TWCR,7)==0);
     5ee:	06 b6       	in	r0, 0x36	; 54
     5f0:	07 fe       	sbrs	r0, 7
     5f2:	fd cf       	rjmp	.-6      	; 0x5ee <I2C_SendMasterDataByte+0x6>

	//Check ACK = SC ACK
	while((TWSR & 0xF8) != 0x28);
     5f4:	81 b1       	in	r24, 0x01	; 1
     5f6:	88 7f       	andi	r24, 0xF8	; 248
     5f8:	88 32       	cpi	r24, 0x28	; 40
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <I2C_SendMasterDataByte+0xc>
 }
     5fc:	08 95       	ret

000005fe <I2C_ReciveMasterDataByte>:
 void I2C_ReciveMasterDataByte(u8* RxData)
 {
     5fe:	fc 01       	movw	r30, r24
    if(RxData != NULL)
     600:	89 2b       	or	r24, r25
     602:	59 f0       	breq	.+22     	; 0x61a <I2C_ReciveMasterDataByte+0x1c>
	{
	  //Clear Flag to start
	  
	  TWCR=(1<<7) | (1<<2);
     604:	84 e8       	ldi	r24, 0x84	; 132
     606:	86 bf       	out	0x36, r24	; 54
	  //Wait for Set flag
	  while(GET_BIT(TWCR,7)==0);
     608:	06 b6       	in	r0, 0x36	; 54
     60a:	07 fe       	sbrs	r0, 7
     60c:	fd cf       	rjmp	.-6      	; 0x608 <I2C_ReciveMasterDataByte+0xa>

	  //Check ACK = SC ACK
	  while((TWSR & 0xF8) != 0x58);
     60e:	91 b1       	in	r25, 0x01	; 1
     610:	98 7f       	andi	r25, 0xF8	; 248
     612:	98 35       	cpi	r25, 0x58	; 88
     614:	e1 f7       	brne	.-8      	; 0x60e <I2C_ReciveMasterDataByte+0x10>
	  *RxData=TWDR;
     616:	83 b1       	in	r24, 0x03	; 3
     618:	80 83       	st	Z, r24
     61a:	08 95       	ret

0000061c <KPD_getValue>:
 
 


 void KPD_getValue(u8* returnedValue)
 {
     61c:	9f 92       	push	r9
     61e:	af 92       	push	r10
     620:	bf 92       	push	r11
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	60 97       	sbiw	r28, 0x10	; 16
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	5c 01       	movw	r10, r24
     u8 KPD_KEYS[4][4]={
     644:	80 e1       	ldi	r24, 0x10	; 16
     646:	e0 e6       	ldi	r30, 0x60	; 96
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	de 01       	movw	r26, r28
     64c:	11 96       	adiw	r26, 0x01	; 1
     64e:	01 90       	ld	r0, Z+
     650:	0d 92       	st	X+, r0
     652:	8a 95       	dec	r24
     654:	e1 f7       	brne	.-8      	; 0x64e <KPD_getValue+0x32>
	     {'1','2','3','A'},
	     {'4','5','6','B'},
	     {'7','8','9','C'},
	     {'*','0','#','D'}
     };
    *returnedValue=KPD_NOT_PRESSED;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	f5 01       	movw	r30, r10
     65a:	80 83       	st	Z, r24
    u8 col;
	u8 row;
	u8 pinvalue;
	u8 PinFlag=0;
     65c:	91 2c       	mov	r9, r1
	for(col=0;col<4;col++)
     65e:	00 e0       	ldi	r16, 0x00	; 0
     660:	39 c0       	rjmp	.+114    	; 0x6d4 <KPD_getValue+0xb8>
	{
	   // activate each col//
	   DIO_SetPinValue(DIO_PORTB,KPD_ColumnsPins[col],DIO_PIN_LOW);
     662:	c0 2e       	mov	r12, r16
     664:	d1 2c       	mov	r13, r1
     666:	f6 01       	movw	r30, r12
     668:	ec 58       	subi	r30, 0x8C	; 140
     66a:	ff 4f       	sbci	r31, 0xFF	; 255
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	60 81       	ld	r22, Z
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
	   for(row=0;row<4;row++)
     676:	10 e0       	ldi	r17, 0x00	; 0
     678:	1f c0       	rjmp	.+62     	; 0x6b8 <KPD_getValue+0x9c>
	   {
	      pinvalue=DIO_GetPinValue(KPD_ROWS_PORT,KPD_RowsPins[row]);
     67a:	e1 2e       	mov	r14, r17
     67c:	f1 2c       	mov	r15, r1
     67e:	f7 01       	movw	r30, r14
     680:	e0 59       	subi	r30, 0x90	; 144
     682:	ff 4f       	sbci	r31, 0xFF	; 255
     684:	60 81       	ld	r22, Z
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_GetPinValue>
		  if(pinvalue==0)
     68c:	81 11       	cpse	r24, r1
     68e:	13 c0       	rjmp	.+38     	; 0x6b6 <KPD_getValue+0x9a>
		  { 
		      *returnedValue=KPD_KEYS[row][col];
     690:	f7 01       	movw	r30, r14
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	8c 0f       	add	r24, r28
     6a0:	9d 1f       	adc	r25, r29
     6a2:	e8 0f       	add	r30, r24
     6a4:	f9 1f       	adc	r31, r25
     6a6:	ec 0d       	add	r30, r12
     6a8:	fd 1d       	adc	r31, r13
     6aa:	80 81       	ld	r24, Z
     6ac:	f5 01       	movw	r30, r10
     6ae:	80 83       	st	Z, r24
			  while(pinvalue=0)
			  {
			     pinvalue=DIO_GetPinValue(KPD_ROWS_PORT,KPD_RowsPins[row]);
			  }
			  
			  PinFlag=1;
     6b0:	99 24       	eor	r9, r9
     6b2:	93 94       	inc	r9
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <KPD_getValue+0xa0>
	u8 PinFlag=0;
	for(col=0;col<4;col++)
	{
	   // activate each col//
	   DIO_SetPinValue(DIO_PORTB,KPD_ColumnsPins[col],DIO_PIN_LOW);
	   for(row=0;row<4;row++)
     6b6:	1f 5f       	subi	r17, 0xFF	; 255
     6b8:	14 30       	cpi	r17, 0x04	; 4
     6ba:	f8 f2       	brcs	.-66     	; 0x67a <KPD_getValue+0x5e>
			  
			  PinFlag=1;
		      break;
		  }
	   }
	   DIO_SetPinValue(DIO_PORTB,KPD_ColumnsPins[col],DIO_PIN_HIGH);
     6bc:	f6 01       	movw	r30, r12
     6be:	ec 58       	subi	r30, 0x8C	; 140
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	41 e0       	ldi	r20, 0x01	; 1
     6c4:	60 81       	ld	r22, Z
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
	   if(PinFlag==1)
     6cc:	f1 e0       	ldi	r31, 0x01	; 1
     6ce:	9f 16       	cp	r9, r31
     6d0:	19 f0       	breq	.+6      	; 0x6d8 <KPD_getValue+0xbc>
    *returnedValue=KPD_NOT_PRESSED;
    u8 col;
	u8 row;
	u8 pinvalue;
	u8 PinFlag=0;
	for(col=0;col<4;col++)
     6d2:	0f 5f       	subi	r16, 0xFF	; 255
     6d4:	04 30       	cpi	r16, 0x04	; 4
     6d6:	28 f2       	brcs	.-118    	; 0x662 <KPD_getValue+0x46>
		   break;
		}
		
	}

 }
     6d8:	60 96       	adiw	r28, 0x10	; 16
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	ef 90       	pop	r14
     6f0:	df 90       	pop	r13
     6f2:	cf 90       	pop	r12
     6f4:	bf 90       	pop	r11
     6f6:	af 90       	pop	r10
     6f8:	9f 90       	pop	r9
     6fa:	08 95       	ret

000006fc <KPD_initDiretions>:

 void KPD_initDiretions(void)
 {
    DIO_SetPinDirection(KPD_COLS_PORT,KPD_COLS0_PIN,DIO_PIN_OUT);
     6fc:	41 e0       	ldi	r20, 0x01	; 1
     6fe:	64 e0       	ldi	r22, 0x04	; 4
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_COLS_PORT,KPD_COLS1_PIN,DIO_PIN_OUT);
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	65 e0       	ldi	r22, 0x05	; 5
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_COLS_PORT,KPD_COLS2_PIN,DIO_PIN_OUT);
     710:	41 e0       	ldi	r20, 0x01	; 1
     712:	66 e0       	ldi	r22, 0x06	; 6
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_COLS_PORT,KPD_COLS3_PIN,DIO_PIN_OUT);
     71a:	41 e0       	ldi	r20, 0x01	; 1
     71c:	67 e0       	ldi	r22, 0x07	; 7
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>

    DIO_SetPinDirection(KPD_ROWS_PORT,KPD_ROWS0_PIN,DIO_PIN_IN);
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_ROWS_PORT,KPD_ROWS1_PIN,DIO_PIN_IN);
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_ROWS_PORT,KPD_ROWS2_PIN,DIO_PIN_IN);
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	65 e0       	ldi	r22, 0x05	; 5
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_ROWS_PORT,KPD_ROWS3_PIN,DIO_PIN_IN);
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	66 e0       	ldi	r22, 0x06	; 6
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>

	DIO_SetPullupRes(KPD_ROWS_PORT,KPD_ROWS0_PIN);
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_SetPullupRes>
	DIO_SetPullupRes(KPD_ROWS_PORT,KPD_ROWS1_PIN);
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_SetPullupRes>
	DIO_SetPullupRes(KPD_ROWS_PORT,KPD_ROWS2_PIN);
     75c:	65 e0       	ldi	r22, 0x05	; 5
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_SetPullupRes>
	DIO_SetPullupRes(KPD_ROWS_PORT,KPD_ROWS3_PIN);
     764:	66 e0       	ldi	r22, 0x06	; 6
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_SetPullupRes>
     76c:	08 95       	ret

0000076e <reverse_string>:
        }
    

}
void reverse_string(u8* buffer)
{   
     76e:	cf 93       	push	r28
     770:	ac 01       	movw	r20, r24
    u8 x = 0;
     772:	90 e0       	ldi	r25, 0x00	; 0
    while(buffer[x] != '\0')  x++;
     774:	01 c0       	rjmp	.+2      	; 0x778 <reverse_string+0xa>
     776:	9f 5f       	subi	r25, 0xFF	; 255
     778:	fa 01       	movw	r30, r20
     77a:	e9 0f       	add	r30, r25
     77c:	f1 1d       	adc	r31, r1
     77e:	80 81       	ld	r24, Z
     780:	81 11       	cpse	r24, r1
     782:	f9 cf       	rjmp	.-14     	; 0x776 <reverse_string+0x8>
	
	 
	   u8 buffer_end = x-1;
     784:	91 50       	subi	r25, 0x01	; 1
	   u8 buffer_center = buffer_end/2;
     786:	c9 2f       	mov	r28, r25
     788:	c6 95       	lsr	r28
	
    
    u8 i = 0;
     78a:	20 e0       	ldi	r18, 0x00	; 0
    while(i <= buffer_center)
     78c:	10 c0       	rjmp	.+32     	; 0x7ae <reverse_string+0x40>
    {
	    u8 temp = buffer[i];
     78e:	62 2f       	mov	r22, r18
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	da 01       	movw	r26, r20
     794:	a6 0f       	add	r26, r22
     796:	b7 1f       	adc	r27, r23
     798:	8c 91       	ld	r24, X
	    buffer[i] = buffer[buffer_end - i];
     79a:	e9 2f       	mov	r30, r25
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	e6 1b       	sub	r30, r22
     7a0:	f7 0b       	sbc	r31, r23
     7a2:	e4 0f       	add	r30, r20
     7a4:	f5 1f       	adc	r31, r21
     7a6:	30 81       	ld	r19, Z
     7a8:	3c 93       	st	X, r19
	    buffer[buffer_end - i] = temp;
     7aa:	80 83       	st	Z, r24
	    i++;
     7ac:	2f 5f       	subi	r18, 0xFF	; 255
	   u8 buffer_end = x-1;
	   u8 buffer_center = buffer_end/2;
	
    
    u8 i = 0;
    while(i <= buffer_center)
     7ae:	c2 17       	cp	r28, r18
     7b0:	70 f7       	brcc	.-36     	; 0x78e <reverse_string+0x20>
	    buffer[i] = buffer[buffer_end - i];
	    buffer[buffer_end - i] = temp;
	    i++;
    }

}
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <convert_dec_to_string>:
    convert_dec_to_string(value,buffer);
    write_string(buffer);

}
void convert_dec_to_string(u32 dec,u8* buffer)
{
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	dc 01       	movw	r26, r24
     7be:	cb 01       	movw	r24, r22
     7c0:	8a 01       	movw	r16, r20
    
    
        if(dec==0)
     7c2:	00 97       	sbiw	r24, 0x00	; 0
     7c4:	a1 05       	cpc	r26, r1
     7c6:	b1 05       	cpc	r27, r1
     7c8:	b1 f4       	brne	.+44     	; 0x7f6 <convert_dec_to_string+0x40>
        {
            buffer[0]='0';
     7ca:	80 e3       	ldi	r24, 0x30	; 48
     7cc:	fa 01       	movw	r30, r20
     7ce:	80 83       	st	Z, r24
            buffer[1]='\0';
     7d0:	11 82       	std	Z+1, r1	; 0x01
     7d2:	1d c0       	rjmp	.+58     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
           u8 i=0;
           u8 rem=0;
           while(dec != 0)
           {
		    rem=dec%10;
            dec=dec/10;
     7d4:	bc 01       	movw	r22, r24
     7d6:	cd 01       	movw	r24, r26
     7d8:	2a e0       	ldi	r18, 0x0A	; 10
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__udivmodsi4>
     7e4:	da 01       	movw	r26, r20
     7e6:	c9 01       	movw	r24, r18
           
            buffer[i]=48+rem;
     7e8:	f8 01       	movw	r30, r16
     7ea:	ec 0f       	add	r30, r28
     7ec:	f1 1d       	adc	r31, r1
     7ee:	60 5d       	subi	r22, 0xD0	; 208
     7f0:	60 83       	st	Z, r22
			i++;
     7f2:	cf 5f       	subi	r28, 0xFF	; 255
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <convert_dec_to_string+0x42>
     7f6:	c0 e0       	ldi	r28, 0x00	; 0
        }
        else
        {
           u8 i=0;
           u8 rem=0;
           while(dec != 0)
     7f8:	00 97       	sbiw	r24, 0x00	; 0
     7fa:	a1 05       	cpc	r26, r1
     7fc:	b1 05       	cpc	r27, r1
     7fe:	51 f7       	brne	.-44     	; 0x7d4 <convert_dec_to_string+0x1e>
           
            buffer[i]=48+rem;
			i++;

           }
		   buffer[i]='\0';
     800:	f8 01       	movw	r30, r16
     802:	ec 0f       	add	r30, r28
     804:	f1 1d       	adc	r31, r1
     806:	10 82       	st	Z, r1
          
           reverse_string(buffer);
     808:	c8 01       	movw	r24, r16
     80a:	0e 94 b7 03 	call	0x76e	; 0x76e <reverse_string>

        }
    

}
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	08 95       	ret

00000816 <peek_lcd>:

} /*start from (0,0)*/
void peek_lcd(void)
{
    //set_pin(B,E);
   DIO_SetPinValue(DIO_PORTB,E,DIO_PIN_HIGH);
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	63 e0       	ldi	r22, 0x03	; 3
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     820:	8a e0       	ldi	r24, 0x0A	; 10
     822:	8a 95       	dec	r24
     824:	f1 f7       	brne	.-4      	; 0x822 <peek_lcd+0xc>
     826:	00 c0       	rjmp	.+0      	; 0x828 <peek_lcd+0x12>
    _delay_us(2);
    //clear_pin(B,E);
   DIO_SetPinValue(DIO_PORTB,E,DIO_PIN_LOW);
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	63 e0       	ldi	r22, 0x03	; 3
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
     832:	08 95       	ret

00000834 <write_char>:



}
void write_char(u8 ch)
{
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	c8 2f       	mov	r28, r24
	{
	      /** upper nipple **/
	      //write_port_reg(A, (ch & 0xF0) | (get_port_reg(A) & 0x0F));
	      //set_pin(B,RS);
	      //clear_pin(B,RW);
		  DIO_SetRegValue(DIO_PORTA,(ch & 0xF0) | (DIO_GetRegValue(DIO_PORTA) & 0x0F));
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	0e 94 15 02 	call	0x42a	; 0x42a <DIO_GetRegValue>
     840:	6c 2f       	mov	r22, r28
     842:	60 7f       	andi	r22, 0xF0	; 240
     844:	8f 70       	andi	r24, 0x0F	; 15
     846:	68 2b       	or	r22, r24
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	0e 94 89 01 	call	0x312	; 0x312 <DIO_SetRegValue>
		  DIO_SetPinValue(DIO_PORTB,RS,DIO_PIN_HIGH);
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
		  DIO_SetPinValue(DIO_PORTB,RW,DIO_PIN_LOW);
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	62 e0       	ldi	r22, 0x02	; 2
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
		  
	      peek_lcd();
     862:	0e 94 0b 04 	call	0x816	; 0x816 <peek_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     866:	8f e3       	ldi	r24, 0x3F	; 63
     868:	9f e1       	ldi	r25, 0x1F	; 31
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <__stack+0xb>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <__stack+0x11>
     870:	00 00       	nop

	      /** lower nipple **/
	      //write_port_reg(A,(ch<<4) | (get_port_reg(A) & 0x0F));
	      //set_pin(B,RS);
	      //clear_pin(B,RW);
		 DIO_SetRegValue(DIO_PORTA,(ch<<4) | (DIO_GetRegValue(DIO_PORTA) & 0x0F));
     872:	90 e1       	ldi	r25, 0x10	; 16
     874:	c9 9f       	mul	r28, r25
     876:	e0 01       	movw	r28, r0
     878:	11 24       	eor	r1, r1
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	0e 94 15 02 	call	0x42a	; 0x42a <DIO_GetRegValue>
     880:	8f 70       	andi	r24, 0x0F	; 15
     882:	6c 2f       	mov	r22, r28
     884:	68 2b       	or	r22, r24
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	0e 94 89 01 	call	0x312	; 0x312 <DIO_SetRegValue>
		 DIO_SetPinValue(DIO_PORTB,RS,DIO_PIN_HIGH);
     88c:	41 e0       	ldi	r20, 0x01	; 1
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
		 DIO_SetPinValue(DIO_PORTB,RW,DIO_PIN_LOW);
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	62 e0       	ldi	r22, 0x02	; 2
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
	      peek_lcd();
     8a0:	0e 94 0b 04 	call	0x816	; 0x816 <peek_lcd>
     8a4:	8f e3       	ldi	r24, 0x3F	; 63
     8a6:	9f e1       	ldi	r25, 0x1F	; 31
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <__stack+0x49>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <__stack+0x4f>
     8ae:	00 00       	nop
	}
    
   


}
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <write_string>:
void write_string(u8* ptr)
{
     8b6:	cf 92       	push	r12
     8b8:	df 92       	push	r13
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
   
       u32 i=0;
     8c4:	c1 2c       	mov	r12, r1
     8c6:	d1 2c       	mov	r13, r1
     8c8:	76 01       	movw	r14, r12
       while(ptr[i] != '\0')
     8ca:	07 c0       	rjmp	.+14     	; 0x8da <write_string+0x24>
       {
        write_char(ptr[i]);
     8cc:	0e 94 1a 04 	call	0x834	; 0x834 <write_char>
        i++;
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	c8 1a       	sub	r12, r24
     8d4:	d8 0a       	sbc	r13, r24
     8d6:	e8 0a       	sbc	r14, r24
     8d8:	f8 0a       	sbc	r15, r24
}
void write_string(u8* ptr)
{
   
       u32 i=0;
       while(ptr[i] != '\0')
     8da:	fe 01       	movw	r30, r28
     8dc:	ec 0d       	add	r30, r12
     8de:	fd 1d       	adc	r31, r13
     8e0:	80 81       	ld	r24, Z
     8e2:	81 11       	cpse	r24, r1
     8e4:	f3 cf       	rjmp	.-26     	; 0x8cc <write_string+0x16>
        write_char(ptr[i]);
        i++;
       }
   

}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	08 95       	ret

000008f4 <write_int>:
    peek_lcd();
	_delay_ms(2);

}
void write_int(u32 value)
{
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	64 97       	sbiw	r28, 0x14	; 20
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
    u8 buffer[20];
    convert_dec_to_string(value,buffer);
     908:	ae 01       	movw	r20, r28
     90a:	4f 5f       	subi	r20, 0xFF	; 255
     90c:	5f 4f       	sbci	r21, 0xFF	; 255
     90e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <convert_dec_to_string>
    write_string(buffer);
     912:	ce 01       	movw	r24, r28
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>

}
     91a:	64 96       	adiw	r28, 0x14	; 20
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <write_command>:
       }
   

}
void write_command(u8 comm)
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	c8 2f       	mov	r28, r24
    /** upper nipple **/
    //write_port_reg(A,(comm & 0xF0) |(get_port_reg(A) & 0x0F));
    //clear_pin(B,RS);
	//clear_pin(B,RW);
	DIO_SetRegValue(DIO_PORTA,(comm & 0xF0) | (DIO_GetRegValue(DIO_PORTA) & 0x0F));
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 15 02 	call	0x42a	; 0x42a <DIO_GetRegValue>
     938:	6c 2f       	mov	r22, r28
     93a:	60 7f       	andi	r22, 0xF0	; 240
     93c:	8f 70       	andi	r24, 0x0F	; 15
     93e:	68 2b       	or	r22, r24
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	0e 94 89 01 	call	0x312	; 0x312 <DIO_SetRegValue>
	DIO_SetPinValue(DIO_PORTB,RS,DIO_PIN_LOW);
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,RW,DIO_PIN_LOW);
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	62 e0       	ldi	r22, 0x02	; 2
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
    peek_lcd();
     95a:	0e 94 0b 04 	call	0x816	; 0x816 <peek_lcd>
     95e:	8f e3       	ldi	r24, 0x3F	; 63
     960:	9f e1       	ldi	r25, 0x1F	; 31
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	f1 f7       	brne	.-4      	; 0x962 <write_command+0x36>
     966:	00 c0       	rjmp	.+0      	; 0x968 <write_command+0x3c>
     968:	00 00       	nop

    /** lower nipple **/
    //write_port_reg(A,(comm<<4) | (get_port_reg(A) & 0x0F));
    //clear_pin(B,RS);
	//clear_pin(B,RW);
	DIO_SetRegValue(DIO_PORTA,(comm<<4) | (DIO_GetRegValue(DIO_PORTA) & 0x0F));
     96a:	90 e1       	ldi	r25, 0x10	; 16
     96c:	c9 9f       	mul	r28, r25
     96e:	e0 01       	movw	r28, r0
     970:	11 24       	eor	r1, r1
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	0e 94 15 02 	call	0x42a	; 0x42a <DIO_GetRegValue>
     978:	8f 70       	andi	r24, 0x0F	; 15
     97a:	6c 2f       	mov	r22, r28
     97c:	68 2b       	or	r22, r24
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 89 01 	call	0x312	; 0x312 <DIO_SetRegValue>
	DIO_SetPinValue(DIO_PORTB,RS,DIO_PIN_LOW);
     984:	40 e0       	ldi	r20, 0x00	; 0
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTB,RW,DIO_PIN_LOW);
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	62 e0       	ldi	r22, 0x02	; 2
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
    peek_lcd();
     998:	0e 94 0b 04 	call	0x816	; 0x816 <peek_lcd>
     99c:	8f e3       	ldi	r24, 0x3F	; 63
     99e:	9f e1       	ldi	r25, 0x1F	; 31
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	f1 f7       	brne	.-4      	; 0x9a0 <write_command+0x74>
     9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <write_command+0x7a>
     9a6:	00 00       	nop
	_delay_ms(2);

}
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	08 95       	ret

000009ae <init_lcd>:
void init_lcd(void)
{
  
    //write_DDR_reg(A,(1<<D4) | (1<<D5) | (1<<D6) | (1<<D7));
    //write_DDR_reg(B,(1<<RS) | (1<<E) | (1<<RW));
	DIO_SetRegDirection(DIO_PORTA,(1<<D4) | (1<<D5) | (1<<D6) | (1<<D7));
     9ae:	60 ef       	ldi	r22, 0xF0	; 240
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetRegDirection>
	DIO_SetRegDirection(DIO_PORTB,(1<<RS) | (1<<E) | (1<<RW));
     9b6:	6e e0       	ldi	r22, 0x0E	; 14
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_SetRegDirection>
	
    //clear_pin(B,E);
   DIO_SetPinValue(DIO_PORTB,E,DIO_PIN_LOW);
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	63 e0       	ldi	r22, 0x03	; 3
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
     9c8:	2f ef       	ldi	r18, 0xFF	; 255
     9ca:	89 ef       	ldi	r24, 0xF9	; 249
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	21 50       	subi	r18, 0x01	; 1
     9d0:	80 40       	sbci	r24, 0x00	; 0
     9d2:	90 40       	sbci	r25, 0x00	; 0
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <init_lcd+0x20>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <init_lcd+0x2a>
     9d8:	00 00       	nop
	
	_delay_ms(20);



    write_command(mode_4_bit);
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>

	write_command(mode_4_bit_dot_matrix);
     9e0:	88 e2       	ldi	r24, 0x28	; 40
     9e2:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>

    write_command(LCD_display_on);
     9e6:	8c e0       	ldi	r24, 0x0C	; 12
     9e8:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>

    write_command(clear_LCD);
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>

    write_command(first_line_begin);
     9f2:	80 e8       	ldi	r24, 0x80	; 128
     9f4:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>

    write_string("User:");
     9f8:	88 e7       	ldi	r24, 0x78	; 120
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
	write_command(second_line_begin);
     a00:	80 ec       	ldi	r24, 0xC0	; 192
     a02:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
    write_string("Pass:");
     a06:	8e e7       	ldi	r24, 0x7E	; 126
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
     a0e:	08 95       	ret

00000a10 <String_Length>:
		 }
      }
	  return 1;
 }
 u8 String_Length(u8*ptr_1)
 {
     a10:	9c 01       	movw	r18, r24
    static u8 i=0;
	while(ptr_1[i]!='\0')
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <String_Length+0xa>
	{
	   i++;
     a14:	8f 5f       	subi	r24, 0xFF	; 255
     a16:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <__data_end>
	  return 1;
 }
 u8 String_Length(u8*ptr_1)
 {
    static u8 i=0;
	while(ptr_1[i]!='\0')
     a1a:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <__data_end>
     a1e:	f9 01       	movw	r30, r18
     a20:	e8 0f       	add	r30, r24
     a22:	f1 1d       	adc	r31, r1
     a24:	90 81       	ld	r25, Z
     a26:	91 11       	cpse	r25, r1
     a28:	f5 cf       	rjmp	.-22     	; 0xa14 <String_Length+0x4>
	{
	   i++;
	}
	return i;
 } 
     a2a:	08 95       	ret

00000a2c <Compare_String>:
 #include "LCD.h"
 #include "LCD_INTERFACE.h"


 u8 Compare_String(u8*ptr,u8*password)
 {
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	8c 01       	movw	r16, r24
     a38:	eb 01       	movw	r28, r22
    if(String_Length(ptr)!=String_Length(password))
     a3a:	0e 94 08 05 	call	0xa10	; 0xa10 <String_Length>
     a3e:	f8 2e       	mov	r15, r24
     a40:	ce 01       	movw	r24, r28
     a42:	0e 94 08 05 	call	0xa10	; 0xa10 <String_Length>
     a46:	f8 12       	cpse	r15, r24
     a48:	13 c0       	rjmp	.+38     	; 0xa70 <Compare_String+0x44>
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	07 c0       	rjmp	.+14     	; 0xa5c <Compare_String+0x30>
	}
	
	  u8 i=0;
	  while(password[i]!='\0')
	  {
	     if(ptr[i]==password[i])
     a4e:	f8 01       	movw	r30, r16
     a50:	e8 0f       	add	r30, r24
     a52:	f9 1f       	adc	r31, r25
     a54:	80 81       	ld	r24, Z
     a56:	28 13       	cpse	r18, r24
     a58:	0d c0       	rjmp	.+26     	; 0xa74 <Compare_String+0x48>
		 {
		   i++;
     a5a:	3f 5f       	subi	r19, 0xFF	; 255
	{
	  return 0;
	}
	
	  u8 i=0;
	  while(password[i]!='\0')
     a5c:	83 2f       	mov	r24, r19
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	fe 01       	movw	r30, r28
     a62:	e8 0f       	add	r30, r24
     a64:	f9 1f       	adc	r31, r25
     a66:	20 81       	ld	r18, Z
     a68:	21 11       	cpse	r18, r1
     a6a:	f1 cf       	rjmp	.-30     	; 0xa4e <Compare_String+0x22>
		 else
		 {
		    return 0;
		 }
      }
	  return 1;
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	03 c0       	rjmp	.+6      	; 0xa76 <Compare_String+0x4a>

 u8 Compare_String(u8*ptr,u8*password)
 {
    if(String_Length(ptr)!=String_Length(password))
	{
	  return 0;
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <Compare_String+0x4a>
		   i++;
		   continue;
		 }
		 else
		 {
		    return 0;
     a74:	80 e0       	ldi	r24, 0x00	; 0
		 }
      }
	  return 1;
 }
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	08 95       	ret

00000a82 <main>:

int main(void)
{

   /*  Initialization for all drivers that needed to project   */
    init_lcd();
     a82:	0e 94 d7 04 	call	0x9ae	; 0x9ae <init_lcd>
	TMR_INIT();
     a86:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <TMR_INIT>
	TMR1_INIT();
     a8a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <TMR1_INIT>
	GI_enable();
     a8e:	0e 94 94 02 	call	0x528	; 0x528 <GI_enable>
	I2C_INITMASTER();
     a92:	0e 94 98 02 	call	0x530	; 0x530 <I2C_INITMASTER>
	UART_INTI();
     a96:	0e 94 04 0b 	call	0x1608	; 0x1608 <UART_INTI>
	ADC_init();
     a9a:	0e 94 6b 00 	call	0xd6	; 0xd6 <ADC_init>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN1,DIO_PIN_IN);//POT
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN0,DIO_PIN_IN);//BUTTON 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_IN);//BUTTON 2
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	62 e0       	ldi	r22, 0x02	; 2
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN6,DIO_PIN_IN);//BUTTON 1
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	66 e0       	ldi	r22, 0x06	; 6
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_IN);//RX
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUT);//TX
     ad0:	41 e0       	ldi	r20, 0x01	; 1
     ad2:	61 e0       	ldi	r22, 0x01	; 1
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUT);//LED 1
     ada:	41 e0       	ldi	r20, 0x01	; 1
     adc:	67 e0       	ldi	r22, 0x07	; 7
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUT);//LED 0
     ae4:	41 e0       	ldi	r20, 0x01	; 1
     ae6:	62 e0       	ldi	r22, 0x02	; 2
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_OUT);//LED 2
     aee:	41 e0       	ldi	r20, 0x01	; 1
     af0:	63 e0       	ldi	r22, 0x03	; 3
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN3,DIO_PIN_OUT);//BUZZER
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	63 e0       	ldi	r22, 0x03	; 3
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN3,DIO_PIN_OUT);//H-A1
     b02:	41 e0       	ldi	r20, 0x01	; 1
     b04:	63 e0       	ldi	r22, 0x03	; 3
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN4,DIO_PIN_OUT);//H-A2
     b0c:	41 e0       	ldi	r20, 0x01	; 1
     b0e:	64 e0       	ldi	r22, 0x04	; 4
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN2,DIO_PIN_OUT);//EN
     b16:	41 e0       	ldi	r20, 0x01	; 1
     b18:	62 e0       	ldi	r22, 0x02	; 2
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN7,DIO_PIN_OUT);
     b20:	41 e0       	ldi	r20, 0x01	; 1
     b22:	67 e0       	ldi	r22, 0x07	; 7
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_SetPinDirection>
	KPD_initDiretions();
     b2a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <KPD_initDiretions>
	write_command(0x85);
     b2e:	85 e8       	ldi	r24, 0x85	; 133
     b30:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
	/*  The beginning of project start with this message on Mobile  */
	UART_TransmitDataString("*-Login As Admin\n");
     b34:	84 e8       	ldi	r24, 0x84	; 132
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
	UART_TransmitDataString("#-Sign In As User\n");
     b3c:	86 e9       	ldi	r24, 0x96	; 150
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
	/* Calling Rx Func To Choose One Of This Options  */
    UART_ReciveChar(&UART);
     b44:	8b e1       	ldi	r24, 0x1B	; 27
     b46:	93 e0       	ldi	r25, 0x03	; 3
     b48:	0e 94 13 0b 	call	0x1626	; 0x1626 <UART_ReciveChar>
	
    while (1) 
    {
	  
	
	  if(UART=='*')
     b4c:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <UART>
     b50:	8a 32       	cpi	r24, 0x2A	; 42
     b52:	09 f0       	breq	.+2      	; 0xb56 <main+0xd4>
     b54:	63 c2       	rjmp	.+1222   	; 0x101c <main+0x59a>
	  {
	    UART_TransmitDataString("Enter Admin Name\n");
     b56:	89 ea       	ldi	r24, 0xA9	; 169
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
		/* First Login As Admin Using UART By Mobile */

	    while(1)
		{
		   if(count_2!=4)
     b5e:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <count_2>
     b62:	84 30       	cpi	r24, 0x04	; 4
     b64:	99 f1       	breq	.+102    	; 0xbcc <main+0x14a>
		   {
		     UART_ReciveChar(&UART);
     b66:	8b e1       	ldi	r24, 0x1B	; 27
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	0e 94 13 0b 	call	0x1626	; 0x1626 <UART_ReciveChar>
		     if(count_1<=3 && UART!='1') // This Condition To Limit The Name Chars
     b6e:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <count_1>
     b72:	e4 30       	cpi	r30, 0x04	; 4
     b74:	b0 f4       	brcc	.+44     	; 0xba2 <main+0x120>
     b76:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <UART>
     b7a:	81 33       	cpi	r24, 0x31	; 49
     b7c:	91 f0       	breq	.+36     	; 0xba2 <main+0x120>
		     {
			     arr_1[count_1]=UART;  // Assign the name of admin in empty array called (arr_1) 
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	eb 56       	subi	r30, 0x6B	; 107
     b82:	fc 4f       	sbci	r31, 0xFC	; 252
     b84:	80 83       	st	Z, r24
			     write_char(UART); // print every chars to LCD
     b86:	0e 94 1a 04 	call	0x834	; 0x834 <write_char>
			     count_1++;  // Increment The count to Assign The UART data to array indexs
     b8a:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <count_1>
     b8e:	8f 5f       	subi	r24, 0xFF	; 255
     b90:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <count_1>
				 /* Ending the access in arr_1 */
			     if(count_1==4)
     b94:	84 30       	cpi	r24, 0x04	; 4
     b96:	d1 f4       	brne	.+52     	; 0xbcc <main+0x14a>
			     {
				     UART_TransmitDataString("Enter Admin Pass\n");
     b98:	8b eb       	ldi	r24, 0xBB	; 187
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
     ba0:	15 c0       	rjmp	.+42     	; 0xbcc <main+0x14a>
			     }
		     }
			 /* Starting Asigning the Admin Pass */
		     else
		     {
			     arr_2[count_2]=UART; // Assign the pass of admin in empty array called (arr_2) 
     ba2:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <count_2>
     ba6:	e8 2f       	mov	r30, r24
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	ef 57       	subi	r30, 0x7F	; 127
     bac:	fc 4f       	sbci	r31, 0xFC	; 252
     bae:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <UART>
     bb2:	90 83       	st	Z, r25
			     write_command((0xc5) + (count_2)); //Incrementing The Cursor In every Cycle 
     bb4:	8b 53       	subi	r24, 0x3B	; 59
     bb6:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
			     write_char(UART); // print every chars to LCD
     bba:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <UART>
     bbe:	0e 94 1a 04 	call	0x834	; 0x834 <write_char>
			     count_2++; // Increment The count to Assign The UART data to array indexs
     bc2:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <count_2>
     bc6:	8f 5f       	subi	r24, 0xFF	; 255
     bc8:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <count_2>
		   }
		   /*******************************************************************************************************************************************************************************/

		   /* Comparing The Pass and the Name in arr_1,arr_2 */

		   if(count_2==4)
     bcc:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <count_2>
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	29 f6       	brne	.-118    	; 0xb5e <main+0xdc>
		   {
		      
		      if(Compare_String(arr_1,"ABCD")==1 && Compare_String(arr_2,"1234")==1)
     bd4:	6d ec       	ldi	r22, 0xCD	; 205
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	85 e9       	ldi	r24, 0x95	; 149
     bda:	93 e0       	ldi	r25, 0x03	; 3
     bdc:	0e 94 16 05 	call	0xa2c	; 0xa2c <Compare_String>
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	09 f0       	breq	.+2      	; 0xbe6 <main+0x164>
     be4:	bc cf       	rjmp	.-136    	; 0xb5e <main+0xdc>
     be6:	62 ed       	ldi	r22, 0xD2	; 210
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	81 e8       	ldi	r24, 0x81	; 129
     bec:	93 e0       	ldi	r25, 0x03	; 3
     bee:	0e 94 16 05 	call	0xa2c	; 0xa2c <Compare_String>
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <main+0x176>
     bf6:	b3 cf       	rjmp	.-154    	; 0xb5e <main+0xdc>
			  {
			     /* While The pass and name is correct this two messages will send by UART to Choose Options */
			     UART_TransmitDataString("X-Sign Up Users\n");
     bf8:	87 ed       	ldi	r24, 0xD7	; 215
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
				 UART_TransmitDataString("Z-Resume Project Normally\n");
     c00:	88 ee       	ldi	r24, 0xE8	; 232
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
				 /* Calling Rx Func To Choose One Of This Options  */
				 UART_ReciveChar(&UART);
     c08:	8b e1       	ldi	r24, 0x1B	; 27
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	0e 94 13 0b 	call	0x1626	; 0x1626 <UART_ReciveChar>
				 if(UART=='Z')
     c10:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <UART>
     c14:	8a 35       	cpi	r24, 0x5A	; 90
     c16:	09 f0       	breq	.+2      	; 0xc1a <main+0x198>
     c18:	b0 c1       	rjmp	.+864    	; 0xf7a <main+0x4f8>
				 {
				    Admin=1;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <Admin>
					while(1)
					{
					    /* Check The state of Button  */
					    if(DIO_GetPinValue(DIO_PORTD,DIO_PIN2)==1)
     c20:	62 e0       	ldi	r22, 0x02	; 2
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_GetPinValue>
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	09 f0       	breq	.+2      	; 0xc2e <main+0x1ac>
     c2c:	d6 c0       	rjmp	.+428    	; 0xdda <main+0x358>
					    {

						    /* Comparing The Pass and the Name in arr_1,arr_2 */
						    if((Compare_String(arr_1,"ABCD")==1  &&  Compare_String(arr_2,"1234")==1))
     c2e:	6d ec       	ldi	r22, 0xCD	; 205
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	85 e9       	ldi	r24, 0x95	; 149
     c34:	93 e0       	ldi	r25, 0x03	; 3
     c36:	0e 94 16 05 	call	0xa2c	; 0xa2c <Compare_String>
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	09 f0       	breq	.+2      	; 0xc40 <main+0x1be>
     c3e:	cd c0       	rjmp	.+410    	; 0xdda <main+0x358>
     c40:	62 ed       	ldi	r22, 0xD2	; 210
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	81 e8       	ldi	r24, 0x81	; 129
     c46:	93 e0       	ldi	r25, 0x03	; 3
     c48:	0e 94 16 05 	call	0xa2c	; 0xa2c <Compare_String>
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	09 f0       	breq	.+2      	; 0xc52 <main+0x1d0>
     c50:	c4 c0       	rjmp	.+392    	; 0xdda <main+0x358>
						    {
							    counter=0; 
     c52:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <counter>
							    counter_1=0;
     c56:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <counter_1>
							    counter_2=0;
     c5a:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <counter_2>
							    write_command(clear_LCD);
     c5e:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
							    write_command(first_line_begin);
     c62:	80 e8       	ldi	r24, 0x80	; 128
     c64:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
							    write_string("Welcome Home:)");
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
							    UART_TransmitDataString("\nThe Door Opened\n");
     c70:	82 e1       	ldi	r24, 0x12	; 18
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
							    TMR1_SetCompareMatch(499); // Activate The Servo Motor
     c78:	83 ef       	ldi	r24, 0xF3	; 243
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 ed 0a 	call	0x15da	; 0x15da <TMR1_SetCompareMatch>
     c80:	2f ef       	ldi	r18, 0xFF	; 255
     c82:	87 ea       	ldi	r24, 0xA7	; 167
     c84:	91 e6       	ldi	r25, 0x61	; 97
     c86:	21 50       	subi	r18, 0x01	; 1
     c88:	80 40       	sbci	r24, 0x00	; 0
     c8a:	90 40       	sbci	r25, 0x00	; 0
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <main+0x204>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <main+0x20e>
     c90:	00 00       	nop
							    _delay_ms(2000); // Timing to Access
							    TMR1_SetCompareMatch(100); // Return Servo Motor to initial position
     c92:	84 e6       	ldi	r24, 0x64	; 100
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 ed 0a 	call	0x15da	; 0x15da <TMR1_SetCompareMatch>
								UART_TransmitDataString("\nThe Door Closed\n");
     c9a:	84 e2       	ldi	r24, 0x24	; 36
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
							    if(Admin==1)
     ca2:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <Admin>
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	09 f0       	breq	.+2      	; 0xcac <main+0x22a>
     caa:	7d c0       	rjmp	.+250    	; 0xda6 <main+0x324>
							    {
								    /* Choosing Any Leds in rooms to Turn it ON  */
								    UART_TransmitDataString("O-LED0 ON\n");
     cac:	86 e3       	ldi	r24, 0x36	; 54
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
								    UART_TransmitDataString("F-LED0 OFF\n");
     cb4:	81 e4       	ldi	r24, 0x41	; 65
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
								    UART_TransmitDataString("N-LED1 ON\n");
     cbc:	8d e4       	ldi	r24, 0x4D	; 77
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
								    UART_TransmitDataString("C-LED1 OFF\n");
     cc4:	88 e5       	ldi	r24, 0x58	; 88
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
								    UART_TransmitDataString("H-LED2 ON\n");
     ccc:	84 e6       	ldi	r24, 0x64	; 100
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
								    UART_TransmitDataString("L-LED2 OFF\n");
     cd4:	8f e6       	ldi	r24, 0x6F	; 111
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
								    UART_TransmitDataString("D-DIMMER ON\n");
     cdc:	8b e7       	ldi	r24, 0x7B	; 123
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
								    UART_TransmitDataString("S-Break\n");
     ce4:	88 e8       	ldi	r24, 0x88	; 136
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
								    while(1)
								    {
									    /* Calling Rx Func To Choose One Of This Options  */
									    UART_ReciveChar(&UART);
     cec:	8b e1       	ldi	r24, 0x1B	; 27
     cee:	93 e0       	ldi	r25, 0x03	; 3
     cf0:	0e 94 13 0b 	call	0x1626	; 0x1626 <UART_ReciveChar>
									    if(UART=='O')
     cf4:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <UART>
     cf8:	8f 34       	cpi	r24, 0x4F	; 79
     cfa:	51 f4       	brne	.+20     	; 0xd10 <main+0x28e>
									    {
										    DIO_SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
     cfc:	41 e0       	ldi	r20, 0x01	; 1
     cfe:	62 e0       	ldi	r22, 0x02	; 2
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
										    UART_TransmitDataString("LED0 IS ON\n");
     d06:	81 e9       	ldi	r24, 0x91	; 145
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
     d0e:	ee cf       	rjmp	.-36     	; 0xcec <main+0x26a>
									    }
									    else if(UART=='F')
     d10:	86 34       	cpi	r24, 0x46	; 70
     d12:	51 f4       	brne	.+20     	; 0xd28 <main+0x2a6>
									    {
										    DIO_SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	62 e0       	ldi	r22, 0x02	; 2
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
										    UART_TransmitDataString("LED0 IS OFF\n");
     d1e:	8d e9       	ldi	r24, 0x9D	; 157
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
     d26:	e2 cf       	rjmp	.-60     	; 0xcec <main+0x26a>
									    }
									    else if(UART=='N')
     d28:	8e 34       	cpi	r24, 0x4E	; 78
     d2a:	51 f4       	brne	.+20     	; 0xd40 <main+0x2be>
									    {
										    DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	67 e0       	ldi	r22, 0x07	; 7
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
										    UART_TransmitDataString("LED1 IS ON\n");
     d36:	8a ea       	ldi	r24, 0xAA	; 170
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
     d3e:	d6 cf       	rjmp	.-84     	; 0xcec <main+0x26a>
									    }
									    else if(UART=='C')
     d40:	83 34       	cpi	r24, 0x43	; 67
     d42:	51 f4       	brne	.+20     	; 0xd58 <main+0x2d6>
									    {
										    DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	67 e0       	ldi	r22, 0x07	; 7
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
										    UART_TransmitDataString("LED1 IS OFF\n");
     d4e:	86 eb       	ldi	r24, 0xB6	; 182
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
     d56:	ca cf       	rjmp	.-108    	; 0xcec <main+0x26a>
									    }
									    else if(UART=='H')
     d58:	88 34       	cpi	r24, 0x48	; 72
     d5a:	51 f4       	brne	.+20     	; 0xd70 <main+0x2ee>
									    {
										    DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH);
     d5c:	41 e0       	ldi	r20, 0x01	; 1
     d5e:	63 e0       	ldi	r22, 0x03	; 3
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
										    UART_TransmitDataString("LED2 IS ON\n");
     d66:	83 ec       	ldi	r24, 0xC3	; 195
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
     d6e:	be cf       	rjmp	.-132    	; 0xcec <main+0x26a>
									    }
									    else if(UART=='L')
     d70:	8c 34       	cpi	r24, 0x4C	; 76
     d72:	51 f4       	brne	.+20     	; 0xd88 <main+0x306>
									    {
										    DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	63 e0       	ldi	r22, 0x03	; 3
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
										    UART_TransmitDataString("LED2 IS OFF\n");
     d7e:	8f ec       	ldi	r24, 0xCF	; 207
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
     d86:	b2 cf       	rjmp	.-156    	; 0xcec <main+0x26a>
									    }
									    else if(UART=='D')
     d88:	84 34       	cpi	r24, 0x44	; 68
     d8a:	51 f4       	brne	.+20     	; 0xda0 <main+0x31e>
									    {
										    DIO_SetPinValue(DIO_PORTD,DIO_PIN7,DIO_PIN_HIGH);
     d8c:	41 e0       	ldi	r20, 0x01	; 1
     d8e:	67 e0       	ldi	r22, 0x07	; 7
     d90:	83 e0       	ldi	r24, 0x03	; 3
     d92:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
										    UART_TransmitDataString("DIMMER IS ON\n");
     d96:	8c ed       	ldi	r24, 0xDC	; 220
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
     d9e:	a6 cf       	rjmp	.-180    	; 0xcec <main+0x26a>
									    }
									    else if(UART=='S')
     da0:	83 35       	cpi	r24, 0x53	; 83
     da2:	09 f0       	breq	.+2      	; 0xda6 <main+0x324>
     da4:	a3 cf       	rjmp	.-186    	; 0xcec <main+0x26a>
     da6:	2f ef       	ldi	r18, 0xFF	; 255
     da8:	83 ed       	ldi	r24, 0xD3	; 211
     daa:	90 e3       	ldi	r25, 0x30	; 48
     dac:	21 50       	subi	r18, 0x01	; 1
     dae:	80 40       	sbci	r24, 0x00	; 0
     db0:	90 40       	sbci	r25, 0x00	; 0
     db2:	e1 f7       	brne	.-8      	; 0xdac <main+0x32a>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <main+0x334>
     db6:	00 00       	nop
										    break;
									    }
								    }
							    }
							    _delay_ms(1000);
							    UART_TransmitDataString("Temp Sensor Begin\n"); 
     db8:	8a ee       	ldi	r24, 0xEA	; 234
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
							    write_command(clear_LCD);
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
							    write_command(first_line_begin);
     dc6:	80 e8       	ldi	r24, 0x80	; 128
     dc8:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
							    write_string("Temp Sensor");
     dcc:	8d ef       	ldi	r24, 0xFD	; 253
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
							    flag=1; //Set Flag 1 To Activate Temp Sensor Readings In Real-Time
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <flag>
						    }
					    }
					    /* Reset Any Activation To Give Access To User To Login */
					    if(DIO_GetPinValue(DIO_PORTD,DIO_PIN6)==1)
     dda:	66 e0       	ldi	r22, 0x06	; 6
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_GetPinValue>
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	09 f0       	breq	.+2      	; 0xde8 <main+0x366>
     de6:	44 c0       	rjmp	.+136    	; 0xe70 <main+0x3ee>
					    {
						    write_command(clear_LCD);
     de8:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
						    write_command(first_line_begin);
     dec:	80 e8       	ldi	r24, 0x80	; 128
     dee:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
						    write_string("User:");
     df2:	88 e7       	ldi	r24, 0x78	; 120
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
						    write_command(second_line_begin);
     dfa:	80 ec       	ldi	r24, 0xC0	; 192
     dfc:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
						    write_string("Pass:");
     e00:	8e e7       	ldi	r24, 0x7E	; 126
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
						    write_command(0x85);
     e08:	85 e8       	ldi	r24, 0x85	; 133
     e0a:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
						    UART_TransmitDataString("\nTemp Sensor Stop");
     e0e:	89 e0       	ldi	r24, 0x09	; 9
     e10:	92 e0       	ldi	r25, 0x02	; 2
     e12:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
						    
						    UART_TransmitDataString("\nLogin Again\n");
     e16:	8b e1       	ldi	r24, 0x1B	; 27
     e18:	92 e0       	ldi	r25, 0x02	; 2
     e1a:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
						    counter=0;
     e1e:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <counter>
						    counter_1=0;
     e22:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <counter_1>
						    flag=0;
     e26:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <flag>
						    DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	63 e0       	ldi	r22, 0x03	; 3
     e2e:	83 e0       	ldi	r24, 0x03	; 3
     e30:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
						    DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	67 e0       	ldi	r22, 0x07	; 7
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
						    DIO_SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	62 e0       	ldi	r22, 0x02	; 2
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
						    DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	63 e0       	ldi	r22, 0x03	; 3
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
						    DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	64 e0       	ldi	r22, 0x04	; 4
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
						    DIO_SetPinValue(DIO_PORTA,DIO_PIN2,DIO_PIN_LOW);
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	62 e0       	ldi	r22, 0x02	; 2
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
						    DIO_SetPinValue(DIO_PORTD,DIO_PIN7,DIO_PIN_LOW);
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	67 e0       	ldi	r22, 0x07	; 7
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
						    
					    }

						/* Temp Sensor Activation With Real-Time */
					    if(flag==1)
     e70:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <flag>
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	09 f0       	breq	.+2      	; 0xe7a <main+0x3f8>
     e78:	76 c0       	rjmp	.+236    	; 0xf66 <main+0x4e4>
					    {
						    ADC_getDigitalValue(ADC_CHANNEL1,&ADC_Data); // Passing The ADC Channel Pin and Variable to assigning the data of temp sensor to it
     e7a:	69 e0       	ldi	r22, 0x09	; 9
     e7c:	73 e0       	ldi	r23, 0x03	; 3
     e7e:	0e 94 84 00 	call	0x108	; 0x108 <ADC_getDigitalValue>
						    analog = ((u32)ADC_Data*50)/1024; // analog value of temp sensor
     e82:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <ADC_Data>
     e86:	30 91 0a 03 	lds	r19, 0x030A	; 0x80030a <ADC_Data+0x1>
     e8a:	a2 e3       	ldi	r26, 0x32	; 50
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__umulhisi3>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	07 2e       	mov	r0, r23
     e98:	7a e0       	ldi	r23, 0x0A	; 10
     e9a:	b6 95       	lsr	r27
     e9c:	a7 95       	ror	r26
     e9e:	97 95       	ror	r25
     ea0:	87 95       	ror	r24
     ea2:	7a 95       	dec	r23
     ea4:	d1 f7       	brne	.-12     	; 0xe9a <main+0x418>
     ea6:	70 2d       	mov	r23, r0
     ea8:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <analog+0x1>
     eac:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <analog>
						    
						    if(DIO_GetPinValue(DIO_PORTB,DIO_PIN0)==0 && DIO_GetPinValue(DIO_PORTD,DIO_PIN6)==0)
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_GetPinValue>
     eb8:	81 11       	cpse	r24, r1
     eba:	55 c0       	rjmp	.+170    	; 0xf66 <main+0x4e4>
     ebc:	66 e0       	ldi	r22, 0x06	; 6
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_GetPinValue>
     ec4:	81 11       	cpse	r24, r1
     ec6:	4f c0       	rjmp	.+158    	; 0xf66 <main+0x4e4>
						    {
							    write_command(second_line_begin);
     ec8:	80 ec       	ldi	r24, 0xC0	; 192
     eca:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
     ece:	2f ef       	ldi	r18, 0xFF	; 255
     ed0:	89 e6       	ldi	r24, 0x69	; 105
     ed2:	98 e1       	ldi	r25, 0x18	; 24
     ed4:	21 50       	subi	r18, 0x01	; 1
     ed6:	80 40       	sbci	r24, 0x00	; 0
     ed8:	90 40       	sbci	r25, 0x00	; 0
     eda:	e1 f7       	brne	.-8      	; 0xed4 <main+0x452>
     edc:	00 c0       	rjmp	.+0      	; 0xede <main+0x45c>
     ede:	00 00       	nop
							    _delay_ms(500);
							    UART_TransmitDataString("\nTemp Sensor readings\n");
     ee0:	89 e2       	ldi	r24, 0x29	; 41
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
							    UART_TransmitDataInt(analog); // Printing Temp Sensor Readings With UART
     ee8:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <analog>
     eec:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <analog+0x1>
     ef0:	0e 94 35 0b 	call	0x166a	; 0x166a <UART_TransmitDataInt>
							    UART_TransmitDataString("\n");
     ef4:	8b e4       	ldi	r24, 0x4B	; 75
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
							    write_int(analog); // Printing Temp Sensor Readings With LCD
     efc:	60 91 0b 03 	lds	r22, 0x030B	; 0x80030b <analog>
     f00:	70 91 0c 03 	lds	r23, 0x030C	; 0x80030c <analog+0x1>
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <write_int>
							    if(analog<25) 
     f0c:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <analog>
     f10:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <analog+0x1>
     f14:	49 97       	sbiw	r24, 0x19	; 25
     f16:	a0 f4       	brcc	.+40     	; 0xf40 <main+0x4be>
							    {
								    /* Turning OFF Air Conditioning */
								    UART_TransmitDataString("Air Conditioning Stop\n");
     f18:	80 e4       	ldi	r24, 0x40	; 64
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
								    DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	63 e0       	ldi	r22, 0x03	; 3
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
								    DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	64 e0       	ldi	r22, 0x04	; 4
     f2e:	82 e0       	ldi	r24, 0x02	; 2
     f30:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
								    DIO_SetPinValue(DIO_PORTA,DIO_PIN2,DIO_PIN_LOW);
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	62 e0       	ldi	r22, 0x02	; 2
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
     f3e:	13 c0       	rjmp	.+38     	; 0xf66 <main+0x4e4>
							    }
							    else
							    {

								    /* Turning ON Air Conditioning */
								    UART_TransmitDataString("Air Conditioning Start\n");
     f40:	87 e5       	ldi	r24, 0x57	; 87
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
								    

								    DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
     f48:	41 e0       	ldi	r20, 0x01	; 1
     f4a:	63 e0       	ldi	r22, 0x03	; 3
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
								    DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	64 e0       	ldi	r22, 0x04	; 4
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
								    DIO_SetPinValue(DIO_PORTA,DIO_PIN2,DIO_PIN_HIGH);
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	62 e0       	ldi	r22, 0x02	; 2
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
								    
							    }
						    }
					    }
						/* Breaking From Admin Mode To User Mode */
					    if(DIO_GetPinValue(DIO_PORTB,DIO_PIN0)==1)
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_GetPinValue>
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	09 f0       	breq	.+2      	; 0xf74 <main+0x4f2>
     f72:	56 ce       	rjmp	.-852    	; 0xc20 <main+0x19e>
					    {
						    Admin_1=1;
     f74:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <Admin_1>
     f78:	51 c0       	rjmp	.+162    	; 0x101c <main+0x59a>
				    
				 }
				 /*****************************************************************************************************************************************************************************/

				 /* Choosing Signing Up A User */
				 if(UART=='X')
     f7a:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <UART>
     f7e:	88 35       	cpi	r24, 0x58	; 88
     f80:	09 f0       	breq	.+2      	; 0xf84 <main+0x502>
     f82:	44 c0       	rjmp	.+136    	; 0x100c <main+0x58a>
				 {
				    write_command(clear_LCD);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
					write_command(first_line_begin);
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
					write_string("User:");
     f90:	88 e7       	ldi	r24, 0x78	; 120
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
					write_command(second_line_begin);
     f98:	80 ec       	ldi	r24, 0xC0	; 192
     f9a:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
					write_string("Pass:");
     f9e:	8e e7       	ldi	r24, 0x7E	; 126
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
					write_command(0x85);
     fa6:	85 e8       	ldi	r24, 0x85	; 133
     fa8:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
					UART_TransmitDataString("Sign Up User Name\n");
     fac:	8f e6       	ldi	r24, 0x6F	; 111
     fae:	92 e0       	ldi	r25, 0x02	; 2
     fb0:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
					while(1)
					{
					   /* Sending data from UART To EEPROM address To Save The Name and Pass */
					   UART_ReciveChar(&UART);
     fb4:	8b e1       	ldi	r24, 0x1B	; 27
     fb6:	93 e0       	ldi	r25, 0x03	; 3
     fb8:	0e 94 13 0b 	call	0x1626	; 0x1626 <UART_ReciveChar>
					   if(count_S_1<=3 && UART!='X')
     fbc:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <count_S_1>
     fc0:	84 30       	cpi	r24, 0x04	; 4
     fc2:	98 f4       	brcc	.+38     	; 0xfea <main+0x568>
     fc4:	60 91 1b 03 	lds	r22, 0x031B	; 0x80031b <UART>
     fc8:	68 35       	cpi	r22, 0x58	; 88
     fca:	79 f0       	breq	.+30     	; 0xfea <main+0x568>
					   {
					     EEPROM_WriteByte(count_S_1,UART);
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 2b 02 	call	0x456	; 0x456 <EEPROM_WriteByte>
						 count_S_1++;
     fd2:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <count_S_1>
     fd6:	8f 5f       	subi	r24, 0xFF	; 255
     fd8:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <count_S_1>
						 if(count_S_1==4)
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	91 f4       	brne	.+36     	; 0x1004 <main+0x582>
						 {
						  UART_TransmitDataString("Sign Up User Pass\n");
     fe0:	82 e8       	ldi	r24, 0x82	; 130
     fe2:	92 e0       	ldi	r25, 0x02	; 2
     fe4:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
     fe8:	0d c0       	rjmp	.+26     	; 0x1004 <main+0x582>
						 }
					   }
					   else
					   {
					      EEPROM_WriteByte((count_S_2+4),UART);
     fea:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <count_S_2>
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	60 91 1b 03 	lds	r22, 0x031B	; 0x80031b <UART>
     ff4:	04 96       	adiw	r24, 0x04	; 4
     ff6:	0e 94 2b 02 	call	0x456	; 0x456 <EEPROM_WriteByte>
						  count_S_2++;
     ffa:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <count_S_2>
     ffe:	8f 5f       	subi	r24, 0xFF	; 255
    1000:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <count_S_2>
					   }
					   /* Ending Storing Of Pass and Name of User In EEPROM */
					   if(count_S_2==4)
    1004:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <count_S_2>
    1008:	84 30       	cpi	r24, 0x04	; 4
    100a:	a1 f6       	brne	.-88     	; 0xfb4 <main+0x532>
					   }

					}
				 }
				 /* Giving Access To User To Login */
				 if(count_S_2==4)
    100c:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <count_S_2>
    1010:	84 30       	cpi	r24, 0x04	; 4
    1012:	09 f0       	breq	.+2      	; 0x1016 <main+0x594>
    1014:	a4 cd       	rjmp	.-1208   	; 0xb5e <main+0xdc>
				 {
				   User=1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <User>
		   
		   
		   
		}
	  }
	  if(UART=='#')
    101c:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <UART>
    1020:	83 32       	cpi	r24, 0x23	; 35
    1022:	81 f4       	brne	.+32     	; 0x1044 <main+0x5c2>
	  {
	     if(c1==0)
    1024:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <c1>
    1028:	81 11       	cpse	r24, r1
    102a:	0c c0       	rjmp	.+24     	; 0x1044 <main+0x5c2>
		 {
		    UART_TransmitDataString("Sign In Using Keybad\n");
    102c:	85 e9       	ldi	r24, 0x95	; 149
    102e:	92 e0       	ldi	r25, 0x02	; 2
    1030:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
			User=1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <User>
			c1++;
    103a:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <c1>
    103e:	8f 5f       	subi	r24, 0xFF	; 255
    1040:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <c1>


	  /* Signing In Using Keybad */


	  KPD_getValue(&data); // Passing Variable Data to KPD func and store the data from KPD to (data)
    1044:	80 e8       	ldi	r24, 0x80	; 128
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	0e 94 0e 03 	call	0x61c	; 0x61c <KPD_getValue>
	  if(data !=KPD_NOT_PRESSED)
    104c:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <data>
    1050:	8f 3f       	cpi	r24, 0xFF	; 255
    1052:	79 f1       	breq	.+94     	; 0x10b2 <main+0x630>
	   {
		    
		    User=1;
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <User>
			Admin=0;
    105a:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <Admin>
		    if(counter<=3)
    105e:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <counter>
    1062:	94 30       	cpi	r25, 0x04	; 4
    1064:	78 f4       	brcc	.+30     	; 0x1084 <main+0x602>
		    {
			    
			    write_char(data); // Printing Data To LCD
    1066:	0e 94 1a 04 	call	0x834	; 0x834 <write_char>
			    buffer[counter]=data; // Assign the name of User in empty array called (arr_1) 
    106a:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <counter>
    106e:	e8 2f       	mov	r30, r24
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	e8 5a       	subi	r30, 0xA8	; 168
    1074:	fc 4f       	sbci	r31, 0xFC	; 252
    1076:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <data>
    107a:	90 83       	st	Z, r25
			    counter++; // Increment The count to Assign The UART data to array indexs
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <counter>
    1082:	17 c0       	rjmp	.+46     	; 0x10b2 <main+0x630>
		    }
		    else if(counter_1<=3)
    1084:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <counter_1>
    1088:	84 30       	cpi	r24, 0x04	; 4
    108a:	98 f4       	brcc	.+38     	; 0x10b2 <main+0x630>
		    {
			    
			    
			    write_command((0xc5) + (counter_1));
    108c:	8b 53       	subi	r24, 0x3B	; 59
    108e:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
			    write_char(data); // Printing Data To LCD
    1092:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <data>
    1096:	0e 94 1a 04 	call	0x834	; 0x834 <write_char>
			    buffer_1[counter_1]=data; // Assign the Pass of User in empty array called (arr_1)
    109a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <counter_1>
    109e:	e8 2f       	mov	r30, r24
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	ec 5b       	subi	r30, 0xBC	; 188
    10a4:	fc 4f       	sbci	r31, 0xFC	; 252
    10a6:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <data>
    10aa:	90 83       	st	Z, r25
			    counter_1++; // Increment The count to Assign The UART data to array indexs
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <counter_1>
			
		    
		    
	    }
		/* Check The State Of Button */
		if(DIO_GetPinValue(DIO_PORTD,DIO_PIN2)==1)
    10b2:	62 e0       	ldi	r22, 0x02	; 2
    10b4:	83 e0       	ldi	r24, 0x03	; 3
    10b6:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_GetPinValue>
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <main+0x63e>
    10be:	2c c1       	rjmp	.+600    	; 0x1318 <main+0x896>
		{

		    
			buffer[counter]='\0';
    10c0:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <counter>
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	e8 5a       	subi	r30, 0xA8	; 168
    10c8:	fc 4f       	sbci	r31, 0xFC	; 252
    10ca:	10 82       	st	Z, r1
			buffer_1[counter_1]='\0';
    10cc:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <counter_1>
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	ec 5b       	subi	r30, 0xBC	; 188
    10d4:	fc 4f       	sbci	r31, 0xFC	; 252
    10d6:	10 82       	st	Z, r1
			EEPROM_Compare(arr_N,arr_P); //Calling EEPROM fun that assigning the data from it addresses to two empty arrays (arr_N,arr_P)
    10d8:	6c e6       	ldi	r22, 0x6C	; 108
    10da:	73 e0       	ldi	r23, 0x03	; 3
    10dc:	8c e1       	ldi	r24, 0x1C	; 28
    10de:	93 e0       	ldi	r25, 0x03	; 3
    10e0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <EEPROM_Compare>
			arr_N[4]='\0'; // ending array
    10e4:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <arr_N+0x4>
			arr_P[4]='\0'; // ending array
    10e8:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <arr_P+0x4>

		    /* Comparing The Pass and the Name in arr_N,arr_P */ 
			if((Compare_String(buffer,arr_N)==1 && Compare_String(buffer_1,arr_P)==1)) 
    10ec:	6c e1       	ldi	r22, 0x1C	; 28
    10ee:	73 e0       	ldi	r23, 0x03	; 3
    10f0:	88 e5       	ldi	r24, 0x58	; 88
    10f2:	93 e0       	ldi	r25, 0x03	; 3
    10f4:	0e 94 16 05 	call	0xa2c	; 0xa2c <Compare_String>
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	09 f0       	breq	.+2      	; 0x10fe <main+0x67c>
    10fc:	e4 c0       	rjmp	.+456    	; 0x12c6 <main+0x844>
    10fe:	6c e6       	ldi	r22, 0x6C	; 108
    1100:	73 e0       	ldi	r23, 0x03	; 3
    1102:	84 e4       	ldi	r24, 0x44	; 68
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	0e 94 16 05 	call	0xa2c	; 0xa2c <Compare_String>
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	09 f0       	breq	.+2      	; 0x1110 <main+0x68e>
    110e:	db c0       	rjmp	.+438    	; 0x12c6 <main+0x844>
			{
			    counter=0;
    1110:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <counter>
			    counter_1=0;
    1114:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <counter_1>
			    counter_2=0;
    1118:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <counter_2>
				
				write_command(clear_LCD);
    111c:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
				write_command(first_line_begin);
    1120:	80 e8       	ldi	r24, 0x80	; 128
    1122:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
				write_string("Welcome Home:)");
    1126:	83 e0       	ldi	r24, 0x03	; 3
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
				UART_TransmitDataString("\nThe Door Opened\n");
    112e:	82 e1       	ldi	r24, 0x12	; 18
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
				TMR1_SetCompareMatch(499); // Turning on servo motor
    1136:	83 ef       	ldi	r24, 0xF3	; 243
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	0e 94 ed 0a 	call	0x15da	; 0x15da <TMR1_SetCompareMatch>
    113e:	2f ef       	ldi	r18, 0xFF	; 255
    1140:	87 ea       	ldi	r24, 0xA7	; 167
    1142:	91 e6       	ldi	r25, 0x61	; 97
    1144:	21 50       	subi	r18, 0x01	; 1
    1146:	80 40       	sbci	r24, 0x00	; 0
    1148:	90 40       	sbci	r25, 0x00	; 0
    114a:	e1 f7       	brne	.-8      	; 0x1144 <main+0x6c2>
    114c:	00 c0       	rjmp	.+0      	; 0x114e <main+0x6cc>
    114e:	00 00       	nop
				_delay_ms(2000);
				TMR1_SetCompareMatch(100); // Return servo motor to its position
    1150:	84 e6       	ldi	r24, 0x64	; 100
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 ed 0a 	call	0x15da	; 0x15da <TMR1_SetCompareMatch>
				UART_TransmitDataString("\nThe Door Closed\n");
    1158:	84 e2       	ldi	r24, 0x24	; 36
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
				if(User==1)
    1160:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <User>
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	09 f0       	breq	.+2      	; 0x116a <main+0x6e8>
    1168:	93 c0       	rjmp	.+294    	; 0x1290 <main+0x80e>
				{
				   
				   write_command(clear_LCD);
    116a:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
				   write_command(first_line_begin);
    116e:	80 e8       	ldi	r24, 0x80	; 128
    1170:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
				   write_string("*-L0O");
    1174:	8b ea       	ldi	r24, 0xAB	; 171
    1176:	92 e0       	ldi	r25, 0x02	; 2
    1178:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
				   write_command(0x85);
    117c:	85 e8       	ldi	r24, 0x85	; 133
    117e:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
				   write_string("#-L1O");
    1182:	81 eb       	ldi	r24, 0xB1	; 177
    1184:	92 e0       	ldi	r25, 0x02	; 2
    1186:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
				   write_command((0x80) + 11);
    118a:	8b e8       	ldi	r24, 0x8B	; 139
    118c:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
				   write_string("0-L2O");
    1190:	87 eb       	ldi	r24, 0xB7	; 183
    1192:	92 e0       	ldi	r25, 0x02	; 2
    1194:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
				   write_command(second_line_begin);
    1198:	80 ec       	ldi	r24, 0xC0	; 192
    119a:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
				   write_string("7-L0F");
    119e:	8d eb       	ldi	r24, 0xBD	; 189
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
				   write_command(0xc5);
    11a6:	85 ec       	ldi	r24, 0xC5	; 197
    11a8:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
				   write_string("8-L1F");
    11ac:	83 ec       	ldi	r24, 0xC3	; 195
    11ae:	92 e0       	ldi	r25, 0x02	; 2
    11b0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
				   write_command((0xc0) + 11);
    11b4:	8b ec       	ldi	r24, 0xCB	; 203
    11b6:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
				   write_string("9-L2F");
    11ba:	89 ec       	ldi	r24, 0xC9	; 201
    11bc:	92 e0       	ldi	r25, 0x02	; 2
    11be:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>

				   while(1)
				   {
				      /* Getting the data from KPD to Choose Options */
				      KPD_getValue(&data);
    11c2:	80 e8       	ldi	r24, 0x80	; 128
    11c4:	93 e0       	ldi	r25, 0x03	; 3
    11c6:	0e 94 0e 03 	call	0x61c	; 0x61c <KPD_getValue>
					  if(data!=KPD_NOT_PRESSED)
    11ca:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <data>
    11ce:	8f 3f       	cpi	r24, 0xFF	; 255
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <main+0x752>
    11d2:	54 c0       	rjmp	.+168    	; 0x127c <main+0x7fa>
					  {
					     switch(data)
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	fc 01       	movw	r30, r24
    11d8:	b3 97       	sbiw	r30, 0x23	; 35
    11da:	e2 32       	cpi	r30, 0x22	; 34
    11dc:	f1 05       	cpc	r31, r1
    11de:	08 f0       	brcs	.+2      	; 0x11e2 <main+0x760>
    11e0:	49 c0       	rjmp	.+146    	; 0x1274 <main+0x7f2>
    11e2:	e6 5d       	subi	r30, 0xD6	; 214
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__tablejump2__>
					     {
						     case '*':
						     DIO_SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	62 e0       	ldi	r22, 0x02	; 2
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
							 UART_TransmitDataString("LED0 IS ON\n");
    11f4:	81 e9       	ldi	r24, 0x91	; 145
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
						     break;
    11fc:	3b c0       	rjmp	.+118    	; 0x1274 <main+0x7f2>
						     case '#':
						     DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH);
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	67 e0       	ldi	r22, 0x07	; 7
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
							 UART_TransmitDataString("LED1 IS ON\n");
    1208:	8a ea       	ldi	r24, 0xAA	; 170
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
						     break;
    1210:	31 c0       	rjmp	.+98     	; 0x1274 <main+0x7f2>
						     case '0':
						     DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH);
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	63 e0       	ldi	r22, 0x03	; 3
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
							 UART_TransmitDataString("LED2 IS ON\n");
    121c:	83 ec       	ldi	r24, 0xC3	; 195
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
							 break;
    1224:	27 c0       	rjmp	.+78     	; 0x1274 <main+0x7f2>
							 case '7':
							 DIO_SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	62 e0       	ldi	r22, 0x02	; 2
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
							 UART_TransmitDataString("LED0 IS OFF\n");
    1230:	8d e9       	ldi	r24, 0x9D	; 157
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
							 break;
    1238:	1d c0       	rjmp	.+58     	; 0x1274 <main+0x7f2>
							 case '8':
							 DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	67 e0       	ldi	r22, 0x07	; 7
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
							 UART_TransmitDataString("LED1 IS OFF\n");
    1244:	86 eb       	ldi	r24, 0xB6	; 182
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
							 break;
    124c:	13 c0       	rjmp	.+38     	; 0x1274 <main+0x7f2>
							 case '9':
							 DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	63 e0       	ldi	r22, 0x03	; 3
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
							 UART_TransmitDataString("LED2 IS OFF\n");
    1258:	8f ec       	ldi	r24, 0xCF	; 207
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
							 break;
    1260:	09 c0       	rjmp	.+18     	; 0x1274 <main+0x7f2>
							 case 'D':
							 DIO_SetPinValue(DIO_PORTD,DIO_PIN7,DIO_PIN_HIGH);
    1262:	41 e0       	ldi	r20, 0x01	; 1
    1264:	67 e0       	ldi	r22, 0x07	; 7
    1266:	83 e0       	ldi	r24, 0x03	; 3
    1268:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
							 UART_TransmitDataString("DIMMER IS ON\n");
    126c:	8c ed       	ldi	r24, 0xDC	; 220
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>

						     

					     }
						 /* To activate The Temp Sensor */
						 if(data=='C')
    1274:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <data>
    1278:	83 34       	cpi	r24, 0x43	; 67
    127a:	51 f0       	breq	.+20     	; 0x1290 <main+0x80e>
    127c:	2f ef       	ldi	r18, 0xFF	; 255
    127e:	88 e5       	ldi	r24, 0x58	; 88
    1280:	96 e0       	ldi	r25, 0x06	; 6
    1282:	21 50       	subi	r18, 0x01	; 1
    1284:	80 40       	sbci	r24, 0x00	; 0
    1286:	90 40       	sbci	r25, 0x00	; 0
    1288:	e1 f7       	brne	.-8      	; 0x1282 <main+0x800>
    128a:	00 c0       	rjmp	.+0      	; 0x128c <main+0x80a>
    128c:	00 00       	nop
    128e:	99 cf       	rjmp	.-206    	; 0x11c2 <main+0x740>
    1290:	2f ef       	ldi	r18, 0xFF	; 255
    1292:	83 ed       	ldi	r24, 0xD3	; 211
    1294:	90 e3       	ldi	r25, 0x30	; 48
    1296:	21 50       	subi	r18, 0x01	; 1
    1298:	80 40       	sbci	r24, 0x00	; 0
    129a:	90 40       	sbci	r25, 0x00	; 0
    129c:	e1 f7       	brne	.-8      	; 0x1296 <main+0x814>
    129e:	00 c0       	rjmp	.+0      	; 0x12a0 <main+0x81e>
    12a0:	00 00       	nop
					  _delay_ms(130);
				   }
				}
				
				_delay_ms(1000);
				UART_TransmitDataString("Temp Sensor Begin\n");
    12a2:	8a ee       	ldi	r24, 0xEA	; 234
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
				write_command(clear_LCD);
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
				write_command(first_line_begin);
    12b0:	80 e8       	ldi	r24, 0x80	; 128
    12b2:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
				write_string("Temp Sensor");
    12b6:	8d ef       	ldi	r24, 0xFD	; 253
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
				flag=1;	// Activating Temp Sensor In Real-Time 	
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <flag>
    12c4:	29 c0       	rjmp	.+82     	; 0x1318 <main+0x896>

			/* Wrong Access to Home Condition */
			else
			{

				counter_2++;
    12c6:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <counter_2>
    12ca:	8f 5f       	subi	r24, 0xFF	; 255
    12cc:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <counter_2>
				if(counter_2<3)
    12d0:	83 30       	cpi	r24, 0x03	; 3
    12d2:	10 f5       	brcc	.+68     	; 0x1318 <main+0x896>
				{
					write_command(clear_LCD);
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
					write_command(first_line_begin);
    12da:	80 e8       	ldi	r24, 0x80	; 128
    12dc:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
    12e0:	2f ef       	ldi	r18, 0xFF	; 255
    12e2:	80 e7       	ldi	r24, 0x70	; 112
    12e4:	92 e0       	ldi	r25, 0x02	; 2
    12e6:	21 50       	subi	r18, 0x01	; 1
    12e8:	80 40       	sbci	r24, 0x00	; 0
    12ea:	90 40       	sbci	r25, 0x00	; 0
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <main+0x864>
    12ee:	00 c0       	rjmp	.+0      	; 0x12f0 <main+0x86e>
    12f0:	00 00       	nop
					_delay_ms(50);
					write_string("Wrong access");
    12f2:	8f ec       	ldi	r24, 0xCF	; 207
    12f4:	92 e0       	ldi	r25, 0x02	; 2
    12f6:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
					write_command(second_line_begin);
    12fa:	80 ec       	ldi	r24, 0xC0	; 192
    12fc:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
					write_string("Try Again");
    1300:	8c ed       	ldi	r24, 0xDC	; 220
    1302:	92 e0       	ldi	r25, 0x02	; 2
    1304:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
					UART_TransmitDataString("\nWrong access to home\n");
    1308:	86 ee       	ldi	r24, 0xE6	; 230
    130a:	92 e0       	ldi	r25, 0x02	; 2
    130c:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
					counter=0;
    1310:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <counter>
					counter_1=0;
    1314:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <counter_1>
			
		}
		

		/* Deactivation to Sensors And Buttons */
		if(DIO_GetPinValue(DIO_PORTD,DIO_PIN6)==1)
    1318:	66 e0       	ldi	r22, 0x06	; 6
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_GetPinValue>
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	09 f0       	breq	.+2      	; 0x1326 <main+0x8a4>
    1324:	44 c0       	rjmp	.+136    	; 0x13ae <main+0x92c>
		{
			write_command(clear_LCD);
    1326:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
			write_command(first_line_begin);
    132a:	80 e8       	ldi	r24, 0x80	; 128
    132c:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
			write_string("User:");
    1330:	88 e7       	ldi	r24, 0x78	; 120
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
			write_command(second_line_begin);
    1338:	80 ec       	ldi	r24, 0xC0	; 192
    133a:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
			write_string("Pass:");
    133e:	8e e7       	ldi	r24, 0x7E	; 126
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
			write_command(0x85);
    1346:	85 e8       	ldi	r24, 0x85	; 133
    1348:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
			UART_TransmitDataString("\nTemp Sensor Stop");
    134c:	89 e0       	ldi	r24, 0x09	; 9
    134e:	92 e0       	ldi	r25, 0x02	; 2
    1350:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
			
			UART_TransmitDataString("\nLogin Again\n");
    1354:	8b e1       	ldi	r24, 0x1B	; 27
    1356:	92 e0       	ldi	r25, 0x02	; 2
    1358:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
			counter=0; // Reset Counter to login again
    135c:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <counter>
			counter_1=0;
    1360:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <counter_1>
			flag=0; //stop Temp Sensor
    1364:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <flag>
			DIO_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	63 e0       	ldi	r22, 0x03	; 3
    136c:	83 e0       	ldi	r24, 0x03	; 3
    136e:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	67 e0       	ldi	r22, 0x07	; 7
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	62 e0       	ldi	r22, 0x02	; 2
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	63 e0       	ldi	r22, 0x03	; 3
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	64 e0       	ldi	r22, 0x04	; 4
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,DIO_PIN2,DIO_PIN_LOW);
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	62 e0       	ldi	r22, 0x02	; 2
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTD,DIO_PIN7,DIO_PIN_LOW);
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	67 e0       	ldi	r22, 0x07	; 7
    13a8:	83 e0       	ldi	r24, 0x03	; 3
    13aa:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
			// count_1=0;
			//count_2=0;
		}
		/* Activation Off Temp Sensor In Real-Time */
		if(flag==1)
    13ae:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <flag>
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <main+0x936>
    13b6:	76 c0       	rjmp	.+236    	; 0x14a4 <main+0xa22>
		{
		   ADC_getDigitalValue(ADC_CHANNEL1,&ADC_Data); // Passing The ADC Channel Pin and Variable to assigning the data of temp sensor to it
    13b8:	69 e0       	ldi	r22, 0x09	; 9
    13ba:	73 e0       	ldi	r23, 0x03	; 3
    13bc:	0e 94 84 00 	call	0x108	; 0x108 <ADC_getDigitalValue>
		   analog = ((u32)ADC_Data*50)/1024;  // analog value of temp sensor
    13c0:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <ADC_Data>
    13c4:	30 91 0a 03 	lds	r19, 0x030A	; 0x80030a <ADC_Data+0x1>
    13c8:	a2 e3       	ldi	r26, 0x32	; 50
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__umulhisi3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	07 2e       	mov	r0, r23
    13d6:	7a e0       	ldi	r23, 0x0A	; 10
    13d8:	b6 95       	lsr	r27
    13da:	a7 95       	ror	r26
    13dc:	97 95       	ror	r25
    13de:	87 95       	ror	r24
    13e0:	7a 95       	dec	r23
    13e2:	d1 f7       	brne	.-12     	; 0x13d8 <main+0x956>
    13e4:	70 2d       	mov	r23, r0
    13e6:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <analog+0x1>
    13ea:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <analog>
		   
		  if(DIO_GetPinValue(DIO_PORTB,DIO_PIN0)==0 && DIO_GetPinValue(DIO_PORTD,DIO_PIN6)==0)
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_GetPinValue>
    13f6:	81 11       	cpse	r24, r1
    13f8:	55 c0       	rjmp	.+170    	; 0x14a4 <main+0xa22>
    13fa:	66 e0       	ldi	r22, 0x06	; 6
    13fc:	83 e0       	ldi	r24, 0x03	; 3
    13fe:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_GetPinValue>
    1402:	81 11       	cpse	r24, r1
    1404:	4f c0       	rjmp	.+158    	; 0x14a4 <main+0xa22>
		  {
			  write_command(second_line_begin);
    1406:	80 ec       	ldi	r24, 0xC0	; 192
    1408:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
    140c:	2f ef       	ldi	r18, 0xFF	; 255
    140e:	89 e6       	ldi	r24, 0x69	; 105
    1410:	98 e1       	ldi	r25, 0x18	; 24
    1412:	21 50       	subi	r18, 0x01	; 1
    1414:	80 40       	sbci	r24, 0x00	; 0
    1416:	90 40       	sbci	r25, 0x00	; 0
    1418:	e1 f7       	brne	.-8      	; 0x1412 <main+0x990>
    141a:	00 c0       	rjmp	.+0      	; 0x141c <main+0x99a>
    141c:	00 00       	nop
			  _delay_ms(500);
			  UART_TransmitDataString("\nTemp Sensor readings\n");
    141e:	89 e2       	ldi	r24, 0x29	; 41
    1420:	92 e0       	ldi	r25, 0x02	; 2
    1422:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
			  UART_TransmitDataInt(analog); // Printing analog value To Mobile
    1426:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <analog>
    142a:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <analog+0x1>
    142e:	0e 94 35 0b 	call	0x166a	; 0x166a <UART_TransmitDataInt>
			  UART_TransmitDataString("\n");
    1432:	8b e4       	ldi	r24, 0x4B	; 75
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
			  write_int(analog); // Printing analog Value To Mobile
    143a:	60 91 0b 03 	lds	r22, 0x030B	; 0x80030b <analog>
    143e:	70 91 0c 03 	lds	r23, 0x030C	; 0x80030c <analog+0x1>
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <write_int>
			  if(analog<25)
    144a:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <analog>
    144e:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <analog+0x1>
    1452:	49 97       	sbiw	r24, 0x19	; 25
    1454:	a0 f4       	brcc	.+40     	; 0x147e <main+0x9fc>
			  {
			      /* Turning Air Conditioning OFF */
			      UART_TransmitDataString("Air Conditioning Stop\n");
    1456:	80 e4       	ldi	r24, 0x40	; 64
    1458:	92 e0       	ldi	r25, 0x02	; 2
    145a:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
				  DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	63 e0       	ldi	r22, 0x03	; 3
    1462:	82 e0       	ldi	r24, 0x02	; 2
    1464:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
				  DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	64 e0       	ldi	r22, 0x04	; 4
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
				  DIO_SetPinValue(DIO_PORTA,DIO_PIN2,DIO_PIN_LOW);
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	62 e0       	ldi	r22, 0x02	; 2
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
    147c:	13 c0       	rjmp	.+38     	; 0x14a4 <main+0xa22>
			  }
			  else
			  {  

			     /* Turning Air Conditioning ON */
			     UART_TransmitDataString("Air Conditioning Start\n");
    147e:	87 e5       	ldi	r24, 0x57	; 87
    1480:	92 e0       	ldi	r25, 0x02	; 2
    1482:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
				 

				 DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
    1486:	41 e0       	ldi	r20, 0x01	; 1
    1488:	63 e0       	ldi	r22, 0x03	; 3
    148a:	82 e0       	ldi	r24, 0x02	; 2
    148c:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
				 DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	64 e0       	ldi	r22, 0x04	; 4
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
				 DIO_SetPinValue(DIO_PORTA,DIO_PIN2,DIO_PIN_HIGH);
    149a:	41 e0       	ldi	r20, 0x01	; 1
    149c:	62 e0       	ldi	r22, 0x02	; 2
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
    14a4:	2f ef       	ldi	r18, 0xFF	; 255
    14a6:	88 e5       	ldi	r24, 0x58	; 88
    14a8:	96 e0       	ldi	r25, 0x06	; 6
    14aa:	21 50       	subi	r18, 0x01	; 1
    14ac:	80 40       	sbci	r24, 0x00	; 0
    14ae:	90 40       	sbci	r25, 0x00	; 0
    14b0:	e1 f7       	brne	.-8      	; 0x14aa <main+0xa28>
    14b2:	00 c0       	rjmp	.+0      	; 0x14b4 <main+0xa32>
    14b4:	00 00       	nop
    14b6:	4a cb       	rjmp	.-2412   	; 0xb4c <main+0xca>

000014b8 <__vector_11>:


/* Activating The ISR For Timer0 Normal Mode When Counter_2==3 */
void __vector_11(void) __attribute__ ((signal));
void __vector_11(void)
{
    14b8:	1f 92       	push	r1
    14ba:	0f 92       	push	r0
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	0f 92       	push	r0
    14c0:	11 24       	eor	r1, r1
    14c2:	2f 93       	push	r18
    14c4:	3f 93       	push	r19
    14c6:	4f 93       	push	r20
    14c8:	5f 93       	push	r21
    14ca:	6f 93       	push	r22
    14cc:	7f 93       	push	r23
    14ce:	8f 93       	push	r24
    14d0:	9f 93       	push	r25
    14d2:	af 93       	push	r26
    14d4:	bf 93       	push	r27
    14d6:	ef 93       	push	r30
    14d8:	ff 93       	push	r31
    
	
	if(counter_2==3) //when user assigning wrong above two times
    14da:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <counter_2>
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <__vector_11+0x2c>
    14e2:	47 c0       	rjmp	.+142    	; 0x1572 <__vector_11+0xba>
	{
	  
	  count++;
    14e4:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <count>
    14e8:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <count+0x1>
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <count+0x1>
    14f2:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <count>
	  write_command(clear_LCD);
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
	  write_command(first_line_begin);
    14fc:	80 e8       	ldi	r24, 0x80	; 128
    14fe:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
	  //write_string("Wait 3 Sec:)");
	  DIO_SetPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_HIGH);
    1502:	41 e0       	ldi	r20, 0x01	; 1
    1504:	63 e0       	ldi	r22, 0x03	; 3
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
	  if(count==TMR_OVF_NUMBER) // waiting 3 sec
    150c:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <count>
    1510:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <count+0x1>
    1514:	87 37       	cpi	r24, 0x77	; 119
    1516:	91 40       	sbci	r25, 0x01	; 1
    1518:	61 f5       	brne	.+88     	; 0x1572 <__vector_11+0xba>
	  {

	      /* Activating System Again */
		  TCNT0=TMR_PRELOAD_VALUE;
    151a:	12 be       	out	0x32, r1	; 50
		  count=0;
    151c:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <count+0x1>
    1520:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <count>
		  counter=0;
    1524:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <counter>
		  counter_1=0;
    1528:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <counter_1>
		  counter_2=0;
    152c:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <counter_2>
		  DIO_SetPinValue(DIO_PORTA,DIO_PIN3,DIO_PIN_LOW);
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	63 e0       	ldi	r22, 0x03	; 3
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	0e 94 13 01 	call	0x226	; 0x226 <DIO_SetPinValue>
		  write_command(clear_LCD);
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
		  write_command(first_line_begin);
    1540:	80 e8       	ldi	r24, 0x80	; 128
    1542:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
		  write_string("User:");
    1546:	88 e7       	ldi	r24, 0x78	; 120
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
		  write_command(second_line_begin);
    154e:	80 ec       	ldi	r24, 0xC0	; 192
    1550:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
		  write_string("Pass:");
    1554:	8e e7       	ldi	r24, 0x7E	; 126
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <write_string>
		  write_command(0x85);
    155c:	85 e8       	ldi	r24, 0x85	; 133
    155e:	0e 94 96 04 	call	0x92c	; 0x92c <write_command>
		  UART_TransmitDataString("\nTime Out\n");
    1562:	8d ef       	ldi	r24, 0xFD	; 253
    1564:	92 e0       	ldi	r25, 0x02	; 2
    1566:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
		  UART_TransmitDataString("Login Again\n");
    156a:	8c e1       	ldi	r24, 0x1C	; 28
    156c:	92 e0       	ldi	r25, 0x02	; 2
    156e:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
	  }
	}
	
	
}
    1572:	ff 91       	pop	r31
    1574:	ef 91       	pop	r30
    1576:	bf 91       	pop	r27
    1578:	af 91       	pop	r26
    157a:	9f 91       	pop	r25
    157c:	8f 91       	pop	r24
    157e:	7f 91       	pop	r23
    1580:	6f 91       	pop	r22
    1582:	5f 91       	pop	r21
    1584:	4f 91       	pop	r20
    1586:	3f 91       	pop	r19
    1588:	2f 91       	pop	r18
    158a:	0f 90       	pop	r0
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	0f 90       	pop	r0
    1590:	1f 90       	pop	r1
    1592:	18 95       	reti

00001594 <TMR1_INIT>:


 void TMR1_INIT(void)
 {
     /* SET PIN DIRECTION */
     SET_BIT(DDRD,5);
    1594:	81 b3       	in	r24, 0x11	; 17
    1596:	80 62       	ori	r24, 0x20	; 32
    1598:	81 bb       	out	0x11, r24	; 17
     /*  FAST PWM MODE 14 */
	 CLEAR_BIT(TCCR1A,0);
    159a:	8f b5       	in	r24, 0x2f	; 47
    159c:	8e 7f       	andi	r24, 0xFE	; 254
    159e:	8f bd       	out	0x2f, r24	; 47
	 SET_BIT(TCCR1A,1);
    15a0:	8f b5       	in	r24, 0x2f	; 47
    15a2:	82 60       	ori	r24, 0x02	; 2
    15a4:	8f bd       	out	0x2f, r24	; 47
	 SET_BIT(TCCR1B,3);
    15a6:	8e b5       	in	r24, 0x2e	; 46
    15a8:	88 60       	ori	r24, 0x08	; 8
    15aa:	8e bd       	out	0x2e, r24	; 46
	 SET_BIT(TCCR1B,4);
    15ac:	8e b5       	in	r24, 0x2e	; 46
    15ae:	80 61       	ori	r24, 0x10	; 16
    15b0:	8e bd       	out	0x2e, r24	; 46

	 /*  NON INVERTING MODE */
	 SET_BIT(TCCR1A,7);
    15b2:	8f b5       	in	r24, 0x2f	; 47
    15b4:	80 68       	ori	r24, 0x80	; 128
    15b6:	8f bd       	out	0x2f, r24	; 47
	 CLEAR_BIT(TCCR1A,6);
    15b8:	8f b5       	in	r24, 0x2f	; 47
    15ba:	8f 7b       	andi	r24, 0xBF	; 191
    15bc:	8f bd       	out	0x2f, r24	; 47

	 /* ICR1 PERIOD TIME */
	 ICR1=4999;
    15be:	87 e8       	ldi	r24, 0x87	; 135
    15c0:	93 e1       	ldi	r25, 0x13	; 19
    15c2:	97 bd       	out	0x27, r25	; 39
    15c4:	86 bd       	out	0x26, r24	; 38

	 /*  PRESCALER 64 */
	 SET_BIT(TCCR1B,0);
    15c6:	8e b5       	in	r24, 0x2e	; 46
    15c8:	81 60       	ori	r24, 0x01	; 1
    15ca:	8e bd       	out	0x2e, r24	; 46
	 SET_BIT(TCCR1B,1);
    15cc:	8e b5       	in	r24, 0x2e	; 46
    15ce:	82 60       	ori	r24, 0x02	; 2
    15d0:	8e bd       	out	0x2e, r24	; 46
	 CLEAR_BIT(TCCR1B,2);
    15d2:	8e b5       	in	r24, 0x2e	; 46
    15d4:	8b 7f       	andi	r24, 0xFB	; 251
    15d6:	8e bd       	out	0x2e, r24	; 46
    15d8:	08 95       	ret

000015da <TMR1_SetCompareMatch>:
 }
 void TMR1_SetCompareMatch(u16 CompareValue)
 {
     OCR1A = CompareValue;
    15da:	9b bd       	out	0x2b, r25	; 43
    15dc:	8a bd       	out	0x2a, r24	; 42
    15de:	08 95       	ret

000015e0 <TMR_INIT>:
  //static void(*callback_2)(void)=NULL;
  void TMR_INIT(void)
  {
     #if TMR_GEN_MODE==TMR_NORMAL_MODE
	    /* TIMER0 CONFG */
		CLEAR_BIT(TCCR0,TMR_PIN6);
    15e0:	83 b7       	in	r24, 0x33	; 51
    15e2:	8f 7b       	andi	r24, 0xBF	; 191
    15e4:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,TMR_PIN3);
    15e6:	83 b7       	in	r24, 0x33	; 51
    15e8:	87 7f       	andi	r24, 0xF7	; 247
    15ea:	83 bf       	out	0x33, r24	; 51
		/* TIMER0 PRELOAD */
		TCNT0=TMR_PRELOAD_VALUE;
    15ec:	12 be       	out	0x32, r1	; 50
		/* TIMER0 INTERRUPT */
		SET_BIT(TIMSK,TMR_PIN0);
    15ee:	89 b7       	in	r24, 0x39	; 57
    15f0:	81 60       	ori	r24, 0x01	; 1
    15f2:	89 bf       	out	0x39, r24	; 57

	 #endif
	
	 /* PRESCALER */

	 SET_BIT(TCCR0,TMR_PIN0);
    15f4:	83 b7       	in	r24, 0x33	; 51
    15f6:	81 60       	ori	r24, 0x01	; 1
    15f8:	83 bf       	out	0x33, r24	; 51
	 SET_BIT(TCCR0,TMR_PIN1);
    15fa:	83 b7       	in	r24, 0x33	; 51
    15fc:	82 60       	ori	r24, 0x02	; 2
    15fe:	83 bf       	out	0x33, r24	; 51
	 CLEAR_BIT(TCCR0,TMR_PIN2);
    1600:	83 b7       	in	r24, 0x33	; 51
    1602:	8b 7f       	andi	r24, 0xFB	; 251
    1604:	83 bf       	out	0x33, r24	; 51
    1606:	08 95       	ret

00001608 <UART_INTI>:
 {
    for(u8 i=0; i<MAX_SIZE;i++)
    {
	    UART_ReciveChar(&arr[i]);
    }
 }
    1608:	8a b1       	in	r24, 0x0a	; 10
    160a:	8b 7f       	andi	r24, 0xFB	; 251
    160c:	8a b9       	out	0x0a, r24	; 10
    160e:	86 e8       	ldi	r24, 0x86	; 134
    1610:	80 bd       	out	0x20, r24	; 32
    1612:	87 e6       	ldi	r24, 0x67	; 103
    1614:	89 b9       	out	0x09, r24	; 9
    1616:	8a b1       	in	r24, 0x0a	; 10
    1618:	88 60       	ori	r24, 0x08	; 8
    161a:	8a b9       	out	0x0a, r24	; 10
    161c:	08 95       	ret

0000161e <UART_TransmitDataChar>:
    161e:	8c b9       	out	0x0c, r24	; 12
    1620:	5d 9b       	sbis	0x0b, 5	; 11
    1622:	fe cf       	rjmp	.-4      	; 0x1620 <UART_TransmitDataChar+0x2>
    1624:	08 95       	ret

00001626 <UART_ReciveChar>:
    1626:	fc 01       	movw	r30, r24
    1628:	89 2b       	or	r24, r25
    162a:	51 f0       	breq	.+20     	; 0x1640 <UART_ReciveChar+0x1a>
    162c:	9a b1       	in	r25, 0x0a	; 10
    162e:	90 61       	ori	r25, 0x10	; 16
    1630:	9a b9       	out	0x0a, r25	; 10
    1632:	5f 9b       	sbis	0x0b, 7	; 11
    1634:	fe cf       	rjmp	.-4      	; 0x1632 <UART_ReciveChar+0xc>
    1636:	8c b1       	in	r24, 0x0c	; 12
    1638:	80 83       	st	Z, r24
    163a:	8a b1       	in	r24, 0x0a	; 10
    163c:	8f 7e       	andi	r24, 0xEF	; 239
    163e:	8a b9       	out	0x0a, r24	; 10
    1640:	08 95       	ret

00001642 <UART_TransmitDataString>:
    1642:	0f 93       	push	r16
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	8c 01       	movw	r16, r24
    164a:	c0 e0       	ldi	r28, 0x00	; 0
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <UART_TransmitDataString+0x12>
    164e:	0e 94 0f 0b 	call	0x161e	; 0x161e <UART_TransmitDataChar>
    1652:	cf 5f       	subi	r28, 0xFF	; 255
    1654:	f8 01       	movw	r30, r16
    1656:	ec 0f       	add	r30, r28
    1658:	f1 1d       	adc	r31, r1
    165a:	80 81       	ld	r24, Z
    165c:	81 11       	cpse	r24, r1
    165e:	f7 cf       	rjmp	.-18     	; 0x164e <UART_TransmitDataString+0xc>
    1660:	10 82       	st	Z, r1
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	08 95       	ret

0000166a <UART_TransmitDataInt>:

 void UART_TransmitDataInt(u16 data)
 {
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	64 97       	sbiw	r28, 0x14	; 20
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    u8 buffer[20];
	convert_dec_to_string(data,buffer);
    167e:	bc 01       	movw	r22, r24
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	ae 01       	movw	r20, r28
    1686:	4f 5f       	subi	r20, 0xFF	; 255
    1688:	5f 4f       	sbci	r21, 0xFF	; 255
    168a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <convert_dec_to_string>
	UART_TransmitDataString(buffer);
    168e:	ce 01       	movw	r24, r28
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_TransmitDataString>
 }
    1696:	64 96       	adiw	r28, 0x14	; 20
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	08 95       	ret

000016a8 <__udivmodsi4>:
    16a8:	a1 e2       	ldi	r26, 0x21	; 33
    16aa:	1a 2e       	mov	r1, r26
    16ac:	aa 1b       	sub	r26, r26
    16ae:	bb 1b       	sub	r27, r27
    16b0:	fd 01       	movw	r30, r26
    16b2:	0d c0       	rjmp	.+26     	; 0x16ce <__udivmodsi4_ep>

000016b4 <__udivmodsi4_loop>:
    16b4:	aa 1f       	adc	r26, r26
    16b6:	bb 1f       	adc	r27, r27
    16b8:	ee 1f       	adc	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	a2 17       	cp	r26, r18
    16be:	b3 07       	cpc	r27, r19
    16c0:	e4 07       	cpc	r30, r20
    16c2:	f5 07       	cpc	r31, r21
    16c4:	20 f0       	brcs	.+8      	; 0x16ce <__udivmodsi4_ep>
    16c6:	a2 1b       	sub	r26, r18
    16c8:	b3 0b       	sbc	r27, r19
    16ca:	e4 0b       	sbc	r30, r20
    16cc:	f5 0b       	sbc	r31, r21

000016ce <__udivmodsi4_ep>:
    16ce:	66 1f       	adc	r22, r22
    16d0:	77 1f       	adc	r23, r23
    16d2:	88 1f       	adc	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	1a 94       	dec	r1
    16d8:	69 f7       	brne	.-38     	; 0x16b4 <__udivmodsi4_loop>
    16da:	60 95       	com	r22
    16dc:	70 95       	com	r23
    16de:	80 95       	com	r24
    16e0:	90 95       	com	r25
    16e2:	9b 01       	movw	r18, r22
    16e4:	ac 01       	movw	r20, r24
    16e6:	bd 01       	movw	r22, r26
    16e8:	cf 01       	movw	r24, r30
    16ea:	08 95       	ret

000016ec <__tablejump2__>:
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	05 90       	lpm	r0, Z+
    16f2:	f4 91       	lpm	r31, Z
    16f4:	e0 2d       	mov	r30, r0
    16f6:	09 94       	ijmp

000016f8 <__umulhisi3>:
    16f8:	a2 9f       	mul	r26, r18
    16fa:	b0 01       	movw	r22, r0
    16fc:	b3 9f       	mul	r27, r19
    16fe:	c0 01       	movw	r24, r0
    1700:	a3 9f       	mul	r26, r19
    1702:	70 0d       	add	r23, r0
    1704:	81 1d       	adc	r24, r1
    1706:	11 24       	eor	r1, r1
    1708:	91 1d       	adc	r25, r1
    170a:	b2 9f       	mul	r27, r18
    170c:	70 0d       	add	r23, r0
    170e:	81 1d       	adc	r24, r1
    1710:	11 24       	eor	r1, r1
    1712:	91 1d       	adc	r25, r1
    1714:	08 95       	ret

00001716 <_exit>:
    1716:	f8 94       	cli

00001718 <__stop_program>:
    1718:	ff cf       	rjmp	.-2      	; 0x1718 <__stop_program>
